<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1.Hello World -- 博客之旅的再一次开始</title>
    <url>/post/16107.html</url>
    <content><![CDATA[<p>你好啊，屏幕前的陌生人 / 老朋友。这是本博客的初啼之声，也是我写作之旅的启航锚点。<span id="more"></span></p>
<h2 id="为什么写博客？">为什么写博客？</h2>
<p>我想，最开始做博客的动机，大概都是源自于羡慕，羡慕其他的个人博客。最开始接触到博客，是在 2018 年前后，那时候看到各个博主自己搭建的博客，样式多样，很多布局和设计我都从来没有看过。对于当时只看过各大互联网平台网页的我来说，无疑是冲击巨大的。<br>
自然而然，我也希望自己可以搭建一个博客。在当时，因为有着众多成熟的博客程序，我也没费什么功夫就搭建好了博客。可是我却陷入了「换主题」「换博客程序」「魔改」的漩涡，最后花费了大量时间在这方面，看着自己的博客越来越「好看」，但是内容却是缺失的，我最后还是放弃了博客，最终以不了了之收场。</p>
<p>过了几年之后，我感觉现在的我应该可以驾驭「博客」这两个字了。于是，我重新建立了博客，也就是现在你看到的这个博客。</p>
<h2 id="也许需要注意的">也许需要注意的</h2>
<p>请容我坦白一个秘密：我有严重的文字整容癖。就像普鲁斯特不断修订《追忆似水年华》，我总忍不住给旧文小修小补。昨天还笃定的观点，今天可能就成了待焚的草稿 —— 这种自我颠覆的冲动，或许正是写作最诚实的模样。<br>
不过别担心，我给每个版本都加上了版本控制。当你看见某段文字标注着「2077.7.7 第五次修改」，不消说，它一定是经过了五次修改，最后一次订正日期是在 2077.7.7。<br>
所以如果你发现某篇文章突然 404，或是字里行间微妙地变了气质，亦或者是文段和前些日子稍显区别。别担心，那只是不同时空的我在隔空对话。就像赫拉克利特说的 "人不能两次踏入同一条河流"，这个博客注定会随着认知的潮汐不断改写着岸边线。</p>
<p>而在回顾往期文章时，我发现某些选题在当下看来确实不够成熟。与其让不完美的内容占据空间，不如腾出位置给更优质的创作 —— 这是我对读者，也是对自己文字的尊重。现如今，我的博客将使用序号来对每一个文章进行排序，当您看见相邻序号间跳跃的裂缝，那些便是我抽回了仍需淬炼的纸页。</p>
<p>啊对了！要是你也有类似的博客故事，欢迎在我的博客坐坐，发表一下意见。而我，早已在静候属于我们的 "见字如面"。</p>
<h2 id="后记">后记</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>2023.6.16 初稿 (hexo 默认)</p>
</li>
<li class="lvl-2">
<p>2024.8.24 第一版</p>
</li>
<li class="lvl-2">
<p>2025.2.18 第二版</p>
</li>
</ul>
]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>10. 购入一台笔记本</title>
    <url>/post/37582.html</url>
    <content><![CDATA[<p>前段时间，购入了一个机械革命无界 pro 的笔记本，现在来谈谈使用体验<span id="more"></span></p>
<h2 id="总评和外观">总评和外观</h2>
<p>在学校没有台式机用，之前一直在将平板当做平时的主力机器（？），后来迫于安卓端实在是搭建不了一套符合我使用的体系，必须购置一台电脑，于是下单购买了机械革命的无界 14pro。</p>
<p>机械革命的无界 14pro 拥有 7840hs 的处理器、以及可更换内存、双硬盘位、价格便宜，除了机械革命本身并不是一线牌子以外，这台笔记本恐怕是完全没有缺点了。</p>
<p>比较可惜的就是只有 14 寸的型号，写代码的时候总是嫌屏幕太小，写着写着就出屏幕外了。而且，我为了拥有更多的桌面空间，只能将笔记本支在显示器支架上放在桌子最里面，屏幕和人的距离可以拉开到 70 + 公分，这时候高分辨率小屏幕的缺点就来了，字好小…</p>
<p>不过，14 寸也有好处，笔记本加上内胆包后依旧可以放进包里，不会有诸如 16 寸无法放进一些小的背包里的窘况。<s>小小的也很可爱？如果有粉色就更好了！</s></p>
<p>外观整体金属感很强，暗银色，但是很容易留痕迹，整体刚度还算不错，机械革命的 logo 居然在边边，颇有一点 thinkpad 的感觉。</p>
<p>自我开始使用这台笔记本开始，我还未发现处理器占用会有 100% 的时候，而家中那台 i3-9100 老爷机动不动就占用 100%。现在的处理器的性能居然已经这么高了吗？照这么想，那么，7940hs 或者 14900ks 性能岂不是炸裂？🤨</p>
<p>如果硬要说一个我最没法忽视的点的话，那就是这块机器的屏幕。对于之前一直用平板办公的我来说，这块屏幕实在是不够「细腻」，虽然用平板和笔记本相比肯定是不对的，这姑且就是我的一些碎碎念吧。</p>
<h2 id="接口和电量">接口和电量</h2>
<p>左侧从转轴向内分别用上了全功能 USB-C、HDMI 2.0、USB 4.0 和极其先进（大声！）的 3.5mm 接口用于耳机耳麦，这个价位居然有 USB4.0，这不得不让人啧啧称奇。右侧两个 USB-A，标准的商务本的标配。不过目前我绝大部分的外设都是通过蓝牙连接，这些丰富的接口我一时间还用不上。</p>
<p>续航方面还算不错，在开 windows 节能模式、配合笔记本的平衡模式，在最低亮度下同时用 edge,word,powerpoint,spotify 的情况下，两小时剩余电量 75%。不过，多次测验下来发现，这个电量还是有点迷，两小时使用，电量剩余大概是 60%~80% 之间波动，目前推测是电池的充电机制有关，平时插电使用时一般电池不会充满以保护电池，这对离电的续航可能有点影响。</p>
<h2 id="内存">内存</h2>
<p>一开始十分的纳闷为什么到手的机器内存只有 15.2GB，询问了一下客服，客服表示内存是 16GB，并且好像不打算解释，我想着反正价格摆在那里，稍稍用比较差的内存也无所谓了，大不了后边就换了这对内存。</p>
<p>后来明白了显存可以通过 bios 调整，于是将将显存从 512MB 调整到了 4GB，看看可不可以换取更好的游戏性能。但是在调整好后打开任务管理器却发现内存只剩 11.7GB 了，这下才醒悟之前少的那些内存都拿去充当专用显存了。而专门设置成显存的内存不可以再当普通内存来用。那这个情况还不如走共享内存机制呢。🤣</p>
<p>4GB 显存下任务管理器<br>
<img data-src="https://cdn.yuuu.org/post-img/10/1.webp" alt="" loading="lazy"><br>
<img data-src="https://cdn.yuuu.org/post-img/10/2.webp" alt="" loading="lazy"><br>
512MB 显存下的任务管理器<img data-src="https://cdn.yuuu.org/post-img/10/3.webp" alt="" loading="lazy"><br>
<img data-src="https://cdn.yuuu.org/post-img/10/4.webp" alt="" loading="lazy"><br>
可以看到，当设置 512MB 显存的时候，共享 GPU 内存会增加，当显存设置为 4GB 时，共享 GPU 内存反而会减少。这么看来，在平时使用的时候，显存是不会缺少的，没有必要的寻求大概也不需要去调整这个显存。</p>
<h2 id="780M">780M</h2>
<p>听各大评测中有提到，这颗核显相较于上一代又提升了多少多少，生产力又解放了多少多少。不过就我的体验而言，该用正经显卡的游戏还是要用正经显卡来玩，比如最近打折的 The Forest，780M 在较低画质情况下只能做到 30fps；但是在诸如泰拉瑞亚之类的性能开销比较低的游戏，780M 可以轻松跑满 120Hz。我上一次用核显打游戏还是用的 G1620 的 HD2500，那时候的核显玩 3D 游戏都是奢望，现如今的核显居然如此强悍，实在是令人称奇。</p>
<p><s>不过我平时并没有特别依赖核显的环境，诸如图像视频处理之类的，780M 对于我来说只有玩游戏了，等日后有了新的使用体验我再加进这里吧。</s>用 ps 做了一张负荷挺小的图片，内存要炸开了，解压其他的文件的时候直接和我说「存储空间不足，无法处理此命令」，我一看内存只有 500MB 剩余，感觉有点汗颜。16GB 的内存实在是太小了。</p>
<h2 id="念念碎">念念碎</h2>
<p>我并不想像专业博主那样子来详细的去测试这个机器怎么怎么样，性能如何，能耗比如何，我只是想从一个正常的使用者来说说一台笔记本。以目前来看，这个笔记本完全可以满足我的目前的使用，那么我也就不多求什么了。</p>
<p>最开始，我本是想买机械革命的极光 pro16，后来听说机械革命是 “小厂”、“质量不行”，于是又去看了一下大伙推荐的 “一线大厂” 的笔记本，但是又发现价格有点高，手中💰又有点紧缺，只好放弃。</p>
<p>后来想了一下，平时玩的游戏大多不需要太高的配置，用电脑更多时候也不是在玩游戏，何必强求上一个游戏本呢？于是干脆把需求降为轻薄本，然后还是选择了机械革命这个 “小厂”，现在感觉这个决定还是不错的。😏</p>
<h2 id="一些图片">一些图片</h2>
<p><s>总感觉这些图片长宽比失调，看着好难受</s>笔记本外观：<br>
<img data-src="https://cdn.yuuu.org/post-img/10/5.webp" alt="" loading="lazy"><br>
<img data-src="https://cdn.yuuu.org/post-img/10/6.webp" alt="" loading="lazy"><br>
<img data-src="https://cdn.yuuu.org/post-img/10/7.webp" alt="" loading="lazy"><br>
<img data-src="https://cdn.yuuu.org/post-img/10/8.webp" alt="" loading="lazy"><br>
<img data-src="https://cdn.yuuu.org/post-img/10/9.webp" alt="" loading="lazy"><br>
<img data-src="https://cdn.yuuu.org/post-img/10/10.webp" alt="" loading="lazy"></p>
]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>11. 近况，我在干什么</title>
    <url>/post/17074.html</url>
    <content><![CDATA[<p>许久没有更新博客，谈谈我最近在干什么。<span id="more"></span></p>
<p>开学后，在学校住宿，没有电脑用，每天就只能刷刷手机玩玩平板度过每一天，自然没法更新博客，当时也就干脆没有去想更新这件事。</p>
<p>后来大概是九月中旬，买了一个笔记本。当时感觉挺新鲜的，毕竟算是人生第一台笔记本，电脑刚到的时候还十分的爱护来着，不用的时候关机合盖，也不怎么带出去用，不想让电池有消耗。但是现在没有这么在意了，电脑不用也开一天，晚上关电脑偶尔会忘记合上，晚修带上电脑在教室离电运行，不想理锂电池反复充放电导致的损耗。果然人都是有这种思维的，东西刚到手上时会额外爱护，但是过一阵后，就没什么所谓了。</p>
<p>拿到电脑没多久，国庆节就到了，于是出门旅游，国庆节外边人很多，我专门找了几条冷门线路来玩，结果和我一样 “聪明” 的人大有人在，人真的很多，玩了四天就回到学校窝着了，学校人是真的少，很适合我这种 I 人生存。😇</p>
<p>国庆节之后就是军训，每天晒晒太阳，体会一下地心引力，一天在外边十个小时，空闲时间被拆的很散，每天玩玩手游刷刷视频就过去了。这期间最大的收获就是把自己的（伪）腰间盘突出治好了，从来没感觉到自己的千年老腰这么属于自己过。</p>
<p>再往后，生活趋于平淡，我找到了生活的节奏。这段日子里，我终于想起来我还有这么一个博客，于是着手想着写一些什么。我的第十篇博文在十一月六号发布，与我在八月二十四号更新的第九篇博文，相隔了 74 天。</p>
<p>大概是在 20 天前，在用多邻国学日语，现在才刚刚学到如何打招呼。多邻国有一个每周排名榜，通过每周累计经验来决定排名，前七名可以进阶下一级，我一周的经验大概就 400 点，而上一周在我的排行榜中，有一个大佬以绝对碾压的经验值，稳坐第一名。截至我周五截图时，积分已经到了 3879，实在是一个热爱学习的大牛。他一周的经验值比我的账号的总值还要高。</p>
<p>对了，最近玩起了雀魂，就是打起了麻将。麻将规则不难，还挺好玩的。以前没人教我怎么玩麻将，总以为麻将是一个很高深的娱乐项目，要有比较高的数学思维，现在总算祛魅了，不过它确实需要动脑子🤪。不过打半庄的时间好像有点久，我真的沉不下心来玩这么久的对局，对于那种搓麻将可以搓到五更的人我还是表示佩服的。</p>
<p>这期间，互联网好像有挺多大事，不过我没有太关注，也懒得去折腾。网站托管在 vercel，访问成功与否和速度快与慢还有是否被劫持都比较玄学，但总体来说，正常访问的时间总会大过不正常的时间。要是哪天 vercel 真的没法访问了，那我也只能投奔 cloudflare 那里了。</p>
]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>12. 使用了双拼一段时间之后</title>
    <url>/post/17812.html</url>
    <content><![CDATA[<p>不知道又是从什么时候开始，双拼又开始被大家提及，亦或者说，每年都有一小段时间，双拼会被重新拿上台面来宣传。<span id="more"></span>大家都在说双拼输入「高效」、「键位合理」、「更适合打字工作者」。每到这些时候，我都对这个所谓的可以提升输入效率的输入法感到心动。但是重新适应一个输入体系并不是一个容易的事情。而在学习的阶段，我的输入效率将会呈现断崖式的下降，最后恐怕是半途而废。</p>
<h2 id="学习的契机">学习的契机</h2>
<p>不过，随着我的生活与电脑、与文字输入的接触越来越多，我对输入的速度也有了要求。而全拼受限于我那僵硬的手指，几乎是没法进一步提升了。但是双拼可以只需输入两个按键就可以打出一个汉字，可以用相对于全拼更少的按击次数来输出与全拼相同的汉字，这个对我的吸引力还是挺大的。</p>
<blockquote>
<p><strong>双拼</strong>是<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU2JUIxJTg5JUU4JUFGJUFEJUU2JThCJUJDJUU5JTlGJUIzJUU4JUJFJTkzJUU1JTg1JUE1JUU2JUIzJTk1" title="汉语拼音输入法">汉语拼音输入法<i class="fa fa-external-link-alt"></i></span>的一种编码方案。相对于<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU1JTg1JUE4JUU2JThCJUJD" title="全拼">全拼<i class="fa fa-external-link-alt"></i></span>而言，使用双拼输入<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU2JUIxJTg5JUU1JUFEJTk3" title="汉字">汉字<i class="fa fa-external-link-alt"></i></span>时只需输入一个代表<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU1JUEzJUIwJUU2JUFGJThE" title="声母">声母<i class="fa fa-external-link-alt"></i></span>的字母，一个代表<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU5JTlGJUI1JUU2JUFGJThE" title="韵母">韵母<i class="fa fa-external-link-alt"></i></span>的字母，就可以打出任意一个中文字了。 --wikipedia<br>
<img data-src="https://cdn.yuuu.org/post-img/12/4.webp" alt="" loading="lazy"></p>
</blockquote>
<h2 id="如何开始学习双拼">如何开始学习双拼</h2>
<p>在这里我选择了小鹤双拼作为我的双拼方案。目前有很多的输入方案，各方案大同小异，可以自行选择方案。</p>
<h3 id="第一步">第一步</h3>
<p>学习的第一步就是开始背键位，哪个字母对应了什么韵母，以小鹤为例的话就是 u=sh,v=zh,i=ch 之类，可以自己画一张图，将字母与韵母都对应起来，在小鹤音形中就有对应的图片可以参考。画好之后放到台面，有事没事扫一眼就可以记住了。</p>
<h3 id="第二步">第二步</h3>
<p>第二部就是「部署」道具，即设置双拼输入法。目前主流的输入法都内置了双拼的选项，打开选中双拼→小鹤双拼（或者你想用的双拼）就可以开始使用了。需要提一点的是，截至我写这篇文章的时候，windows 拼音输入法还没有内置小鹤双拼方案。windows 提供的双拼方案中为微软双拼、智能 ABC、自然码，如果需要小鹤的话需要我们自定义一个出来，我们可以通过选择自然码来作为模板，然后对着小鹤的布局来一个一个更改，这可能需要点时间，我们不妨在这个时间来检测自己的记忆情况。以下是两张流程图。<br>
<img data-src="https://cdn.yuuu.org/post-img/12/1.webp" alt="" loading="lazy"><br>
<img data-src="https://cdn.yuuu.org/post-img/12/2.webp" alt="" loading="lazy"></p>
<h3 id="第三步">第三步</h3>
<p>开始就是直接开始实战，用不着惊讶，这种技能难道不是熟能生巧的吗？我们可以开始试着将自己的输入方式更改为双拼，打上几段话。甚至的，我们可以自主的切断自己的后路，将所有的输入方式都改为双拼，主打的就是一个「连字都不会打的话，干嘛还要聊天」。如果真的可以做到我所说的那种程度，怕不是一天之内就可以将双拼练的有模有样了🤣。</p>
<h3 id="第四步">第四步</h3>
<p>第四步？已经没有第四步了，接下来就是不断的反复使用，形成肌肉记忆，就像之前用全拼一样，当打击按键的速度和当时全拼的速度一样的时候，那么双拼更高的输入效率让你遥遥领先于之前的自己。</p>
<h2 id="双拼的优与劣">双拼的优与劣</h2>
<h3 id="手机输入品质可以提升">手机输入品质可以提升</h3>
<p>手机因为屏幕的原因，一般人最多也就只能两指输入，而不能像电脑那样十指输入，那么可以减少按键次数的双拼就很好的缓解了手指过载太大的问题，所有的字符都只需要键入两次即可开始候选，配合上手机的滑动输入，输入效率就有了质的飞跃。</p>
<h3 id="双拼的问题">双拼的问题</h3>
<p>双拼其实算是全拼的一个变种，或者说他们本身的同根生，全拼有点问题其实双拼也有，比如重码多、选字困难，可是五笔却可以直接形码定字。后来双拼也有做出了形码的方案，不过好像只能局限于单一的输入法，没法做到每个输入法都支持。</p>
<h3 id="思维跟不上输入">思维跟不上输入</h3>
<p>脑子更不上，我承认这是我的问题。在我写这篇博文的时候，我的脑子永远都跟不上我的手，这也许算是半个笑话😄，但是事实确实如此，思维速度更不上双拼速度，再快的打字速度也是白搭。以目前来看，哪怕是使用全拼，我写一篇博文的时间也不会比双拼慢多少。</p>
<h3 id="双拼后的打字速度">双拼后的打字速度</h3>
<p>写文章的时候顺便测试了一下打字速度。双拼 58 个字符每分钟，全拼 43 个字符每分钟，不过测试不算严谨，测试双拼速度的时候总是打错好多字；而测试全拼速度的时候又带着双拼的肌肉记忆，干扰了输入。这个测试结果也就看个乐子罢了。注：CPM 是 Characters Per Minute 的缩写，与 KPM 类似，表示每分钟输入了多少字符，中文名称是字符 / 分钟。计算方法：用正确的总输入字符次数除以总花费的时间（以分钟为单位）。</p>
<p><img data-src="https://cdn.yuuu.org/post-img/12/3.webp" alt="" loading="lazy"></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>13.ssh 知识整理</title>
    <url>/post/64202.html</url>
    <content><![CDATA[<p>这并不是一篇指导性的文章，而是一篇初学者的笔记，可能会随时改动，其中也可能遍布错误。此外，我感觉这更像是一篇冗长啰嗦的唠叨。😪</p>
<p>以下代码都是在 Debian 系统上进行的操作。</p>
<h2 id="基础">基础</h2>
<p>一般情况下 linux 默认安装了 ssh。linux 一般使用 ssh 连接。没有安装的话可以按照一下命令安装</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#安装</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install openssh-server  <span class="comment"># 对于Debian/Ubuntu</span></span><br><span class="line"><span class="built_in">sudo</span> yum install openssh-server      <span class="comment"># 对于RHEL/CentOS</span></span><br><span class="line"><span class="comment">#启动</span></span><br><span class="line"><span class="built_in">sudo</span> service ssh start    <span class="comment"># 对于系统V（System V）初始化系统</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl start ssh  <span class="comment"># 对于使用systemd的系统</span></span><br></pre></td></tr></tbody></table></figure>
<p>在 <code>/etc/ssh/sshd_config</code> 可以调整 ssh 配置，调整前先备份。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> /etc/ssh/sshd_config /etc/ssh/backup.sshd_config <span class="comment"># 备份好习惯</span></span><br><span class="line"><span class="built_in">sudo</span> vim /etc/ssh/sshd_config <span class="comment"># 使用vim</span></span><br><span class="line"><span class="built_in">sudo</span> nano /etc/ssh/sshd_config <span class="comment"># 使用nano</span></span><br><span class="line">sshd -t <span class="comment">#用于测试ssh服务器配置文件是否正确</span></span><br><span class="line"><span class="built_in">sudo</span> service ssh restart <span class="comment"># 修改完之后重启</span></span><br></pre></td></tr></tbody></table></figure>
<p>ssh 最常见的用途之一是远程登录到远程服务器或计算机。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ssh username@remote_host <span class="comment"># 替换为你的username和remote_host</span></span><br></pre></td></tr></tbody></table></figure>
<p>第一次连接服务器大概会出现以下情况。</p>
<figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">The authenticity of host '1.1.1.1 (1.1.1.1)' can't be established.</span><br><span class="line">ED25519 key fingerprint is SHA256:rqEuH0ymaN0LbB1vPKzRpfgew+5hBusv1/ReDGJ6bDs.</span><br><span class="line">This key is not known by any other names</span><br><span class="line">Are you sure you want to continue connecting (yes/no/[fingerprint])?</span><br><span class="line"># 翻译</span><br><span class="line">无法确定主机 "1.1.1.1 (1.1.1.1) "的真实性。</span><br><span class="line">ED25519 密钥指纹为SHA256:rqEuH0ymaN0LbB1vPKzRpfgew+5hBusv1/ReDGJ6bDs。</span><br><span class="line">此密钥没有其他名称</span><br><span class="line">您确定要继续连接（是/否/[指纹]）？</span><br></pre></td></tr></tbody></table></figure>
<p>这个消息通常是在你首次通过 ssh 连接到一个远程服务器时出现的。它是 ssh 的一种安全机制，目的是确保你连接的服务器确实是你想要连接的服务器，而不是中间人攻击（Man-in-the-Middle Attack）的一部分。</p>
<p>一般情况下只需按下 "Enter" 即可。接下来就是输入密码，linux 默认输入密码的时候不会有任何提示或者显示。输入完密码再次回车即可登入服务器。以后将不会再次提醒无法验证该服务器的真实性，因为 ssh 客户端将保存该主机的公钥，并在将来的连接中使用它来验证主机的真实性。不过，当服务器修改了公钥或者对系统进行了重置，那么 ssh 客户端会在下一次连接中警告称：</p>
<figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!</span><br><span class="line">Someone could be eavesdropping on you right now (man-in-the-middle attack)!</span><br><span class="line">It is also possible that a host key has just been changed.</span><br><span class="line">The fingerprint for the ECDSA key sent by the remote host is</span><br><span class="line">SHA256: [新的密钥指纹]</span><br><span class="line">Please contact your system administrator.</span><br><span class="line">Add correct host key in /path/to/your/.ssh/known_hosts to get rid of this message.</span><br><span class="line">Offending ECDSA key in /path/to/your/.ssh/known_hosts:1</span><br><span class="line">remove with:</span><br><span class="line">ssh-keygen -f "/path/to/your/.ssh/known_hosts" -R [服务器IP地址]</span><br><span class="line">ECDSA host key for [服务器IP地址] has changed and you have requested strict checking.</span><br><span class="line">Host key verification failed.</span><br><span class="line"># 翻译</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line"></span><br><span class="line">@ 警告：远程主机标识已更改！ @</span><br><span class="line"></span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">有可能有人在做坏事！</span><br><span class="line">可能有人正在窃听你（中间人攻击）！</span><br><span class="line">也有可能是主机密钥刚刚被更改。</span><br><span class="line">远程主机发送的 ECDSA 密钥的指纹是</span><br><span class="line">sha256: [新的密钥指纹] 请联系系统管理员。</span><br><span class="line">请联系系统管理员。</span><br><span class="line">在 /path/to/your/.ssh/known_hosts 中添加正确的主机密钥，以消除此信息。</span><br><span class="line">在 /path/to/your/.ssh/known_hosts:1 中的违规 ECDSA 密钥</span><br><span class="line">删除：</span><br><span class="line">ssh-keygen -f "/path/to/your/.ssh/known_hosts" -R [服务器 IP 地址] ECDSA 主机密钥。</span><br><span class="line">服务器 IP 地址] 的 ECDSA 主机密钥已更改，您要求进行严格检查。</span><br><span class="line">主机密钥验证失败。</span><br></pre></td></tr></tbody></table></figure>
<h2 id="ssh无密码登录">ssh 无密码登录</h2>
<p>我们会发现，每一次连接的时候，服务器都要求我们输入密码。如果我们每一次都使用诸如 <code>ssh username@remote_host</code>+<code>password</code> 的方式，可能会感到十分的厌烦，这时候我们就可以使用 ssh 密钥对来连接到远程服务器。如果私钥没有设置密码，就不需要输入密码。从而达到无密码登录。<code>ssh-keygen</code> 可以生成密钥对，接下来连续三次回车即可生成密钥对，</p>
<figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 2048</span><br><span class="line"># 生成一个2048位的RSA密钥对,可以选择更长的</span><br><span class="line">❯ ssh-keygen -t rsa -b 2048</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/c/Users/admin/.ssh/id_rsa):# 存储位置（回车）</span><br><span class="line">Enter passphrase (empty for no passphrase): # 可以选择输入密码（回车）</span><br><span class="line">Enter same passphrase again: # 再次输入密码（回车）</span><br><span class="line">Your identification has been saved in /c/Users/admin/.ssh/id_rsa</span><br><span class="line">Your public key has been saved in /c/Users/admin/.ssh/id_rsa.pub</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:a9G5vG/6Qz6Aptj/cFQsPZtt+DjiAMIBVI9fW/OIENM admin@PC</span><br><span class="line">The key's randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">| .o.. o.         |</span><br><span class="line">|   . o oE  o     |</span><br><span class="line">|    o o . + =    |</span><br><span class="line">|   . o o = B *   |</span><br><span class="line">|    o o S.= = o  |</span><br><span class="line">|     . .o=...+   |</span><br><span class="line">|     o o= =+o .  |</span><br><span class="line">|    . o. = o=.   |</span><br><span class="line">|       ...==oo   |</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></tbody></table></figure>
<p>此时我们就生成好了一个 2048 位的 RSA 密钥对，此时它存储在 <code>c/Users/admin/.ssh/id_rsa</code> 这个位置，可以从自己的终端看到文件所在位置。接下来我们可以使用 <code>ssh-copy-id</code> 将它复制到远程服务器上。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ssh-copy-id username@remote-server</span><br></pre></td></tr></tbody></table></figure>
<p>执行这个命令后，系统会要求您输入远程服务器的密码，然后会将您本地计算机上的 <code>~/.ssh/id_rsa.pub</code>（或其他公钥文件）的内容追加到远程服务器上的 <code>~/.ssh/authorized_keys</code> 文件中。此时，就完成了公钥的复制。此时就已经完成了无密码登录的步骤，以后使用 ssh 连接都只需要输入以下代码即可</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ssh username@remote-server</span><br></pre></td></tr></tbody></table></figure>
<p>如果不想用 ssh-copy-id，可以使用 <code>scp</code> 指令，将公钥发送到服务器。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">scp /Users/admin/.ssh/id_rsa.pub username@remote_host:~/.ssh</span><br></pre></td></tr></tbody></table></figure>
<p>多讲’亿’句。其中，<code>scp</code>（Secure Copy Protocol）是一个用于在本地计算机和远程服务器之间安全地复制文件的命令行工具。基础指令如下。</p>
<ol>
<li class="lvl-3">
<p>可以将本地的文件复制到服务器。</p>
 <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">scp local_file.txt user@remote_server_ip:/path/to/destination/</span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-2">
<li class="lvl-6">
<p>local_file.txt: 本地文件的路径。</p>
</li>
<li class="lvl-6">
<p>user: 远程服务器上的用户名。</p>
</li>
<li class="lvl-6">
<p>remote_server_ip: 远程服务器的 IP 地址。</p>
</li>
<li class="lvl-6">
<p>/path/to/destination/: 目标目录在远程服务器上的路径。</p>
</li>
</ul>
</li>
<li class="lvl-3">
<p>反过来可以将服务器的文件复制回来。</p>
 <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">scp user@remote_server_ip:/path/to/remote_file.txt /local/destination/</span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-2">
<li class="lvl-6">
<p>user: 远程服务器上的用户名。</p>
</li>
<li class="lvl-6">
<p>remote_server_ip: 远程服务器的 IP 地址。</p>
</li>
<li class="lvl-6">
<p>/path/to/remote_file.txt: 远程服务器上要复制的文件路径。</p>
</li>
<li class="lvl-6">
<p>/local/destination/: 本地目录，用于保存复制的文件。</p>
</li>
</ul>
</li>
<li class="lvl-3">
<p>复制整个目录（递归）到远程服务器</p>
 <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">scp -r local_directory user@remote_server_ip:/path/to/destination/</span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-2">
<li class="lvl-6">
<p>-r: 表示递归复制，用于复制整个目录。</p>
</li>
<li class="lvl-6">
<p>local_directory: 本地目录的路径</p>
</li>
<li class="lvl-6">
<p>user: 远程服务器上的用户名。</p>
</li>
<li class="lvl-6">
<p>remote_server_ip: 远程服务器的 IP 地址。<br>
-/path/to/destination/: 目标目录在远程服务器上的路径，指定复制到远程服务器的位置。</p>
</li>
</ul>
</li>
<li class="lvl-3">
<p>复制整个目录（递归）到本机</p>
 <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">scp -r user@remote_server_ip:/path/to/remote_directory /local/destination/</span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-2">
<li class="lvl-6">
<p>-r: 表示递归复制，用于复制整个目录。</p>
</li>
<li class="lvl-6">
<p>user: 远程服务器上的用户名。</p>
</li>
<li class="lvl-6">
<p>remote_server_ip: 远程服务器的 IP 地址。</p>
</li>
<li class="lvl-6">
<p>/path/to/remote_directory: 远程服务器上要复制的目录路径。</p>
</li>
<li class="lvl-6">
<p>/local/destination/: 本地目录，用于保存复制的目录。</p>
</li>
</ul>
</li>
</ol>
<h3 id="更简便一点">更简便一点</h3>
<p>经过了刚才<s>繁琐冗赘</s>的说明。此时，我们完成了无密码登录，以后使用 ssh 连接都只需要输入我们想登录的服务器和用户即可登录。那么，我们还可以再简便一点吗？</p>
<p>当然，这样做还可以更懒一点，比如建立一个 sh 文件。</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示菜单</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"1, 1.1.1.1"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"2, 2.2.2.2"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"3, 3.3.3.3"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"4, 退出"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取用户输入</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请选择需要连接的服务器（输入相应的数字）: "</span> choice</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 case 语句进行选择</span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$choice</span> <span class="keyword">in</span></span><br><span class="line">    1)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"1.1.1.1"</span></span><br><span class="line">        ssh username@1.1.1.1</span><br><span class="line">        ;;</span><br><span class="line">    2)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"连接2.2.2.2"</span></span><br><span class="line">        ssh username@2.2.2.2</span><br><span class="line">        ;;</span><br><span class="line">    3)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"连接3.3.3.3"</span></span><br><span class="line">        ssh username@3.3.3.3</span><br><span class="line">        ;;</span><br><span class="line">    4)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"退出脚本"</span></span><br><span class="line">        <span class="built_in">exit</span> 0</span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"无效的选择，请输入1-4之间的数字"</span></span><br><span class="line">        ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></tbody></table></figure>
<p>这下每次只需运行脚本，输入数字即可连接。</p>
<p>或者说，你的目前在用移动端类 unix\linux 系统（比如 termux，一个适用于 Android 操作系统的开源终端模拟器应用），你打开它的唯一目的就是远程连接服务器，那么我们还可以玩的更极端点，直接使用 <code>alias</code> 来起一个别名。而 <code>alias</code> 是一个用于创建命令别名的 shell 内建命令。别名允许用户为常用的命令或一系列命令定义短而易记的替代名称。<code>alias</code> 基本语法为 <code>alias name='command'</code>。别名只在当前会话中有效，如果您想要使别名在每个新的 shell 会话中都可用，可以将别名定义添加到 shell 配置文件（如～/.bashrc 或～/.bash_profile）中。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'alias link=ssh username@remote_host'</span> &gt;&gt; ~/.bashrc <span class="comment"># 使用bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'alias link=ssh username@remote_host'</span> &gt;&gt; ~/.zshrc <span class="comment"># 使用zsh</span></span><br></pre></td></tr></tbody></table></figure>
<p>此时在终端输入 <code>link</code> 即可直接连接到 <code>username@remote_host</code>，<code>alias</code> 只做替换功能，我们完全可以继续使用其他参数诸如 <code>-p</code> 和 <code>-t</code>。</p>
<blockquote>
<p>注：termux 好像没有 bashrc，需要自己新建，以上代码可以直接新建。</p>
</blockquote>
<h2 id="ssh别名">ssh 别名</h2>
<p>想必看到这里，你已经基础了解了 ssh 是如何使用的了。尽管刚刚，我们已经会使用 alias 来起一个别名，但是就我而言，我其实并不喜欢为 ssh 专门新建一个 alias。那么，难道我们每一次都要完整的输入一次 <code>ssh username@remote_host</code> 吗？其实 ssh 也有一个专门的配置文件来帮助你为不同的 SSH 连接设置简短易记的别名，从而简化连接命令。<br>
SSH 别名可以通过配置文件 <code>.ssh/config</code> 实现，这个文件位于用户的主目录下 <code>~/.ssh/config</code>。如果文件不存在，你可以手动创建它。</p>
<p>基本的配置如下所示：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Host myserver</span><br><span class="line">    HostName remote_host</span><br><span class="line">    User  username</span><br><span class="line">    Port  22</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa</span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>Host: 自定义别名。在连接时使用这个名称，而不需要输入完整的主机名。</p>
</li>
<li class="lvl-2">
<p>HostName: 实际的主机名或 IP 地址。</p>
</li>
<li class="lvl-2">
<p>User: 登录所使用的用户名。</p>
</li>
<li class="lvl-2">
<p>Port: 服务器的 SSH 端口。如果不是默认的 22 端口，则需要指定。</p>
</li>
<li class="lvl-2">
<p>IdentityFile: 私钥文件路径。如果你有多个私钥文件，可以指定特定的文件。</p>
</li>
</ul>
<p>配置好别名后，你只需要使用 ssh 命令加上别名即可：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ssh myserver </span><br><span class="line"><span class="comment">#同等于ssh -i  ~/.ssh/id_rsa username@remote_host -p 22</span></span><br></pre></td></tr></tbody></table></figure>
<p>还有一件事。使用 SSH 别名后，<strong>仍然需要密钥进行无密码登录</strong>，但 SSH 别名可以让连接过程更加简便。</p>
<h3 id="ssh别名的其他选项">ssh 别名的其他选项</h3>
<p>一般情况下，以上的配置就已经够用了。不过还有一些选项有时候也是会用上的。</p>
<h4 id="ForwardAgent">ForwardAgent</h4>
<p>ForwardAgent，它允许将本地 SSH 代理转发到远程服务器，从而使你可以在连接到远程服务器后，无需重新输入密码或私钥，即可在远程服务器上发起其他 SSH 连接。说的再详细一点就是：SSH Agent 的功能是，你只需要在本地机器上解锁一次私钥，后续的 SSH 连接会使用这个已经解锁的密钥，而不需要你再次输入密码。那么，ForwardAgent 是用来将本机的 SSH 代理转发到远程机器上，使得远程机器可以利用本机的 SSH 代理进行进一步的 SSH 连接。通过 ForwardAgent，在第一台机器上启动了 SSH 代理，之后连接到第二台机器时，这个代理会被转发到第二台机器上。然后第二台机器就可以使用在第一台机器上的密钥来进行连接，从而实现无密码登录，而不用将密钥拷贝到中间机器上。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Host server</span><br><span class="line">    ForwardAgent <span class="built_in">yes</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="ServerAliveInterval-和-ServerAliveCountMax">ServerAliveInterval 和 ServerAliveCountMax</h4>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Host server</span><br><span class="line">    ServerAliveInterval 60</span><br><span class="line">    ServerAliveCountMax 3</span><br></pre></td></tr></tbody></table></figure>
<p>ServerAliveInterval: 通过设置一个间隔来发送 keep-alive 消息，防止连接断开。详细点说就是：定义 SSH 客户端在多长时间内（以秒为单位）没有收到服务器响应时，会主动发送 keep-alive 消息以检查连接是否仍然有效。这个选项有助于防止长时间闲置的 SSH 连接因超时而断开。</p>
<p>ServerAliveCountMax：设置在没有收到服务器响应的情况下，客户端可以发送多少次保持活动信号。</p>
<h2 id="其他的指令">其他的指令</h2>
<p>既然都讲到这里了，不如再多讲讲有关 ssh 的知识。现在说说 <code>-t</code> 选项。<code>-t</code> 是 ssh 命令的一个选项，用于在远程服务器上分配一个伪终端，在某些情况很有用。例子:</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ssh -t username@remote_host <span class="string">'sudo apt update &amp;&amp; sudo apt upgrade'</span></span><br><span class="line">Hit:1 http://mirrors.cloud.aliyuncs.com/debian bullseye InRelease</span><br><span class="line">......</span><br><span class="line">0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.</span><br><span class="line">Connection to remote_host closed.</span><br><span class="line"> ~/</span><br></pre></td></tr></tbody></table></figure>
<p>可以看到，此时参数 <code>-t</code> 表示要分配一个伪终端（pseudo-tty）。在执行完 <code>sudo apt update &amp;&amp; sudo apt upgrade</code> 后，伪终端则是会立即关闭。这种行为是由于指令执行完毕后没有额外的交互需要，所以终端会自动关闭。可以增加一个 <code>&amp;&amp;bash</code> 来启动一个新的 <code>bash</code> 会话，能够在保持 ssh 连接的情况下继续与服务器互动。但是我暂时还不知道这个能用来干什么。🤔</p>
<p>看了一下文档，发现 ssh 还有用作代理的方法，使用 <code>-D 端口号</code>参数，即可指定动态端口转发，创建一个 SOCKS 代理服务器，该代理服务器将在本地计算机的指定端口上监听。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ssh -D 1080 username@remote_host</span><br></pre></td></tr></tbody></table></figure>
<p>以上代码建立了一个 ssh，它将在本地计算机的 1080 端口上监听，并且转发流量。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ssh -fNCqTn -D 1080 username@remote_host </span><br><span class="line"><span class="comment"># 加这么多参数好像有点重复，实际使用上可以看需删减参数</span></span><br></pre></td></tr></tbody></table></figure>
<p>如果我们使用 ssh 作为代理的话，可以用以下的参数</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-f：将 ssh 连接放到后台运行，使其在后台运行，以便您可以继续使用终端。</p>
</li>
<li class="lvl-2">
<p>-N：告诉 ssh 不要执行任何远程命令，它只会建立连接而不执行任何额外的命令。</p>
</li>
<li class="lvl-2">
<p>-C: 启用数据压缩。这将通过 zlib 库对传输的数据进行压缩，以减小传输的数据量。</p>
</li>
<li class="lvl-2">
<p>-q: 静默模式。该选项用于减少输出，使 ssh 在执行时更为静默，不输出不必要的信息。</p>
</li>
<li class="lvl-2">
<p>-T: 禁用伪终端分配。通常，ssh 会为远程连接分配伪终端，但使用 -T 选项会禁用这个分配，适用于不需要交互的连接。</p>
</li>
<li class="lvl-2">
<p>-n: 防止远程命令执行时，ssh 从标准输入读取数据。</p>
</li>
</ul>
<p>而 <code>-L</code> 也是大差不差。在使用 <code>-L</code> 选项时，可本地主机上的一个端口映射到远程主机的指定端口。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ssh -L 9999:example.org:80 -N -T username@remote_host</span><br></pre></td></tr></tbody></table></figure>
<p>此时，访问 local:9999 即为访问 example.org:80<br>
这个 ssh 命令的目的是通过 ssh 隧道将本地端口（localhost:9999）转发到远程主机（<span class="exturl" data-url="aHR0cDovL2V4YW1wbGUub3Jn">example.org<i class="fa fa-external-link-alt"></i></span>）的端口 80。</p>
<p><code>-J</code>，这个 ssh 参数是用于通过跳板主机（jumphost）连接到远程服务器的。跳板主机充当一个中间站，帮助我们间接地连接到目标服务器。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ssh -J username@jump_host username@remote_host</span><br></pre></td></tr></tbody></table></figure>
<p><code>-J</code>: 指定跳板主机，表示要通过跳板主机连接到目标服务器。</p>
<p>可以用来连接当作外网连接内网的跳板机。而在一些安全要求较高的环境中，跳板主机可以作为一个堡垒机（Bastion Host），所有外部连接都必须先通过堡垒机，再通过内部网络连接到其他服务器。还有的时候需要通过多个跳板主机才能达到目标服务器，这就形成了一个跳板链。通过 ssh 的 - J 选项，可以指定多个跳板主机，以建立跳板链。比如 <code>ssh -J user1@jump_host1,user2@jump_host2 user@remote_host</code></p>
<p>累了，不想写了。over.😇</p>
<p>参考：</p>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly90bGRyLmluYnJvd3Nlci5hcHAvcGFnZXMvY29tbW9uL3NzaA==">ssh | tldr InBrowser.App<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81NzYzMDYzMw==">ssh 命令的三种代理功能（-L/-R/-D）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="记录">记录</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>2024-02-02 初稿完成。</p>
</li>
<li class="lvl-2">
<p>2024-02-10 订正初稿，发布。</p>
</li>
<li class="lvl-2">
<p>2024-05-10 更新杂七杂八的其他指令.</p>
</li>
<li class="lvl-2">
<p>2024-10-20 更新 ssh 别名，和 ServerAliveInterval、ForwardAgent、ProxyJump 讲解。</p>
</li>
</ul>
<p>无关紧要的念念碎：怎么这玩意越写越多了，而且的 ssh 内容真的好多啊，再写下去还不如去看官方文档了。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>14.malloc 的微浅理解</title>
    <url>/post/24530.html</url>
    <content><![CDATA[<p>这段时间在学习数据结构。对数据结构中的 malloc 总是感到困惑，这几天查了资料，算是查清楚了 malloc 的用法，特此记录<span id="more"></span>在数据结构中，对结构体最开始分配空间的步骤是（以线性表为例）：</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>{</span></span><br><span class="line">  ElemType data[MaxSize];<span class="comment">//`ElemType` 就是用来代替实际数据类型（如int）的一个占位符。</span></span><br><span class="line">  <span class="type">int</span> length;</span><br><span class="line">} SqList;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">CreateList</span><span class="params">(SqList *&amp;L, ElemType a[], <span class="type">int</span> n)</span>{ </span><br><span class="line">  L = (SqList *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SqList));</span><br><span class="line">  <span class="keyword">while</span>(i&lt;n){</span><br><span class="line">    L -&gt; data[k]=a[i];</span><br><span class="line">    k++,i++;</span><br><span class="line">  }</span><br><span class="line">  L -&gt;length = k;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>在这段算法中，比较难理解的是这两行代码</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">SqList *&amp;L;</span><br><span class="line"><span class="comment">//和</span></span><br><span class="line">L = (SqList *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SqList));</span><br></pre></td></tr></tbody></table></figure>
<p>前者代表的是对指针的引用，允许函数内部修改函数外部传入的指针本身，而不仅仅是修改指针所指向的值。后者是对指针所指向的地址进行动态内存分配。</p>
<p>对于 <code>SqList *&amp;L</code>，<br>
<code>*</code> 用于指针前面时，它表示解引用操作，即获取指针所指向的值。例如，<code>int x = *ptr;</code> 表示将指针 <code>ptr</code> 指向的整数值赋给变量 <code>x</code>。<br>
<code>&amp;</code> 运算符：<code>&amp;</code> 运算符用于取地址操作。当 <code>&amp;</code> 用于变量前面时，它返回该变量的地址。例如，<code>int x = 10; int *ptr = &amp;x;</code> 将变量 <code>x</code> 的地址赋给指针 <code>ptr</code>。<code>*&amp;</code>：这个组合可以看作是将一个指针的引用。<code>*</code> 表示指针，而 <code>&amp;</code> 表示引用。所以 <code>*&amp;</code> 表示指针的引用。这在 C/C++ 中是合法的语法，允许在函数参数中传递指针的引用，以便在函数内部修改指针指向的地址。因此，<code>SqList *&amp;L</code> 声明了一个指针 <code>L</code> 的引用，它指向一个 <code>SqList</code> 类型的对象</p>
<p>我们在来讲讲 malloc。malloc 全称 memory allocation，在 cppference 中有写到 malloc 的功能。</p>
<blockquote>
<p>Allocates&nbsp;<code>size</code>&nbsp;bytes of uninitialized storage.<br>
分配&nbsp;<code>size</code>&nbsp;字节的未初始化存储。<br>
If allocation succeeds, returns a pointer that is suitably aligned for any object type with&nbsp;<span class="exturl" data-url="aHR0cHM6Ly9lbi5jcHByZWZlcmVuY2UuY29tL3cvYy9sYW5ndWFnZS9vYmplY3QjQWxpZ25tZW50" title="c/language/object">fundamental alignment<i class="fa fa-external-link-alt"></i></span>.<br>
如果分配成功，则返回一个指针，该指针适合任何具有基本对齐方式的对象类型。<br>
If&nbsp;<code>size</code>&nbsp;is zero, the behavior of&nbsp;<code>malloc</code>&nbsp;is implementation-defined. For example, a null pointer may be returned. Alternatively, a non-null pointer may be returned; but such a pointer should not be&nbsp;<span class="exturl" data-url="aHR0cHM6Ly9lbi5jcHByZWZlcmVuY2UuY29tL3cvYy9sYW5ndWFnZS9vcGVyYXRvcl9tZW1iZXJfYWNjZXNz" title="c/language/operator member access">dereferenced<i class="fa fa-external-link-alt"></i></span>, and should be passed to&nbsp;<span class="exturl" data-url="aHR0cHM6Ly9lbi5jcHByZWZlcmVuY2UuY29tL3cvYy9tZW1vcnkvZnJlZQ==" title="c/memory/free">free<i class="fa fa-external-link-alt"></i></span>&nbsp;to avoid memory leaks.<br>
如果&nbsp;<code>size</code>&nbsp;为零，则&nbsp;<code>malloc</code>&nbsp;的行为是实现定义的。例如，可以返回空指针。或者，可以返回非空指针；但这样的指针不应该被取消引用，并且应该传递给 free 以避免内存泄漏。</p>
</blockquote>
<p>以下是 malloc（） 函数的声明。</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">malloc</span><span class="params">(<span class="type">size_t</span> size)</span></span><br></pre></td></tr></tbody></table></figure>
<p>其中，<code>size_t</code> 是一个无符号整数类型，通常用于表示内存块的大小在不同的平台上，<code>size_t</code> 的大小可能会有所不同，但它通常被设计为足以容纳系统中最大可能的对象大小。</p>
<blockquote>
<p><code>size_t</code>&nbsp;can store the maximum size of a theoretically possible object of any type (including array).</p>
</blockquote>
<p><code>void*</code> 是一个指针类型，表示指向未知类型的指针。这种类型的指针可以指向任何类型的数据，但不能直接对其进行解引用操作。</p>
<p>所以我们需要将其转化，因此可以有</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span>* intPtr = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br></pre></td></tr></tbody></table></figure>
<p>或者说，可以使用隐式转化</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span>* intPtr = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br></pre></td></tr></tbody></table></figure>
<p>此刻，一个内存空间就创立好了，那么，发生了什么事情？</p>
<p>当执行 <code>int* intPtr = malloc(sizeof(int));</code> 这行代码时，发生了以下几件事情：</p>
<ol>
<li class="lvl-3">
<p><strong><code>malloc</code> 分配内存</strong>：<code>malloc(sizeof(int))</code> 这部分是一个函数调用，它调用了 <code>malloc</code> 函数来分配一块内存空间，大小为 <code>sizeof(int)</code> 字节，也就是一个整数大小的内存块。<code>sizeof()</code> 是一个运算符，用于计算指定类型的大小。</p>
</li>
<li class="lvl-3">
<p><strong>返回指针</strong>：<code>malloc</code> 函数返回一个指向新分配的内存块起始地址的指针。这个指针的类型是 <code>void*</code>，即指向未知类型的指针，需要转化。</p>
</li>
<li class="lvl-3">
<p><strong>类型转换</strong>：在赋值语句 <code>int* intPtr = ...</code> 中，<code>void*</code> 类型的指针被隐式地转换为 <code>int*</code> 类型的指针。这是因为 <code>int*</code> 类型的指针可以指向整数类型的数据，而 <code>malloc</code> 返回的指针指向的是刚分配的内存块，大小为一个整数的大小。</p>
</li>
<li class="lvl-3">
<p><strong>赋值给指针变量</strong>：分配的内存块的起始地址被赋值给了 <code>intPtr</code> 指针变量，使得 <code>intPtr</code> 指向了这块新分配的内存空间。</p>
</li>
</ol>
<p>因此，<code>int* intPtr = malloc(sizeof(int));</code> 这行代码的作用是分配一块大小为一个整数大小的内存空间，并将其起始地址存储在 <code>intPtr</code> 指针变量中，以便后续使用。当然，这个数字还可以通过 n 来拓展<br>
<span class="exturl" data-url="aHR0cDovL2NwcGZlcmVuY2UuY29t">cppference.com<i class="fa fa-external-link-alt"></i></span> 也写出了关于它的用法和格式</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>   </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span> </span></span><br><span class="line">&nbsp;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> </span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> *p1 = <span class="built_in">malloc</span>(<span class="number">4</span>*<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="comment">// allocates enough for an array of 4 int(为 4 个 int 的数组分配足够的空间)</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> *p2 = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>[<span class="number">4</span>]));<span class="comment">//same, naming the type directly(一样，直接命名类型)</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> *p3 = <span class="built_in">malloc</span>(<span class="number">4</span>*<span class="keyword">sizeof</span> *p3);<span class="comment">//same, without repeating the type name(相同，不重复类型名称)</span></span><br><span class="line">&nbsp;</span><br><span class="line">    <span class="keyword">if</span>(p1) {</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n=<span class="number">0</span>; n&lt;<span class="number">4</span>; ++n) <span class="comment">// populate the array</span></span><br><span class="line">            p1[n] = n*n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n=<span class="number">0</span>; n&lt;<span class="number">4</span>; ++n) <span class="comment">// print it back out</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"p1[%d] ==&nbsp;%d\n"</span>, n, p1[n]);</span><br><span class="line">    }</span><br><span class="line">&nbsp;</span><br><span class="line">    <span class="built_in">free</span>(p3);</span><br><span class="line">    <span class="built_in">free</span>(p3);</span><br><span class="line">    <span class="built_in">free</span>(p3);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>如有错误，还请指出，愿我们共同成长。</p>
<p>参考资料:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9lbi5jcHByZWZlcmVuY2UuY29tL3cvYy9tZW1vcnkvbWFsbG9j">cppreference.com<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>15. 挑战 -- 蜜雪冰城糯香柠檬茶</title>
    <url>/post/43443.html</url>
    <content><![CDATA[<p>上个月末，蜜雪冰城的糯香柠檬茶突然在 q 群中火起来，原因是一位网友吐槽这杯玩意喝起来像是妖梦袜子泡水的味道。<span id="more"></span></p>
<p>这杯东西既然能让网友做出这么大的评价，想必味道一定是非同小可。此番美味，定当品尝。</p>
<p>于是我在 6 月 25 日慕名前去蜜雪冰城那买了一杯正常糖正常冰的糯香柠檬茶，然而遗憾的是，我并没有吃出期望的妖梦袜子泡水的味道。</p>
<p>先来说说正常糖正常冰的糯香柠檬茶的味道吧，正常糖正常冰的糯香柠檬茶与正常糖正常冰的冰鲜柠檬水几乎没有区别，若要说其中的细微差别话，那就是时不时能喝到隐藏在甜蜜之下的那一丝的袜子味。在味蕾品鉴清甜的柠檬水时，其中的臭袜子味已经附着其中，当甜意褪去，那种若有若无的袜子味便慢慢的侵占整个口腔，遍布味蕾，深入咽喉，苦涩难消。</p>
<p>若不是已经知道了这杯饮料的风味就应该是偏向袜子那般酸臭的味道，我得开始怀疑是不是这家店的卫生条件不达标。此等美味，不像是常规工艺可以加工出来，更像是由一些难以注意到的生物的不懈努力才可少许展现出来。</p>
<p>尽管如此，这杯正常糖正常冰的糯香柠檬茶我还是能很轻松的喝下去，毕竟只是稍有异味的甜品。而就在今天，我常混迹的一个群又开始讨论起了关于糯香柠檬茶的味道如何如何刺激。正巧，上一次品尝了全糖全冰的糯香柠檬茶，感觉完全没有刺激感，这次点一次常温不额外加糖的来试试。</p>
<p>刚入口，最先感觉的是柠檬的酸苦，过量的柠檬汁主导的苦涩酸冲击着味蕾，但是都还能接受。同时，我也品尝到了熟悉的–<s>妖梦</s>臭袜子味，熟悉的感觉，隐藏在苦涩酸之中，就像当时隐藏在全糖的那般，然而却没有上一次那般匿影藏形，气势汹汹的随着柠檬味涌进来。</p>
<p>随着液体来到咽腔，我才明白为什么它能被称为袜子泡水茶，此时的苦涩酸已经中的涩与酸已经退尽，苦味与糯米的特色风味结合，最后结合出了纯正（大概）的棉袜子风味。这股味道十分的冲，直冲冲的涌上鼻腔，进攻性极强，喝完感觉有点眩晕。</p>
<p>第一口确实难以接受，但是第二口已经有了心理准备，可以开始细细品味一番了。熟悉的味道铺遍味蕾，深入咽腔，呛到有点难以呼吸。那种酸香、黏稠、醇厚的感觉，压迫着所有被接触到的肌肉、神经。液体随着食道进入腹部，感觉那股气味也一气贯通的进入了腹部，感觉呼出的气都是这股味道，不断的刺激嗅觉上皮细胞，提醒自己吃了不该吃的东西。</p>
<p>喝完第二口好几分钟，我都没有勇气去喝第三口。但是口腔还是残留着那股气味，所谓 “余味无穷” 是不是也能描述这个场景。</p>
<p>随着喝的次数的增加，我觉得已经可以拼配出所谓的袜子味了，大概就是家中的一些布制品，放置在阴暗稍微潮湿的地方，经过一定时间的 “发酵”，所散发出来的味道。而在鞋子中的环境则也是如此，一定的温度，比较密闭的空间，稍微潮湿的环境，最后也能合成出差不多的味道。至于为什么糯香柠檬茶也能有这般风味，有人解释是因为糯米有 γ- 氨基丁酸之类等等，和袜子风味差不多，具体什么的就不清楚了。</p>
<p>写到这里，我已经喝掉了一半，坐在电脑前也有一个半小时了。随着饮用的次数增多，其中的糯米味道（袜子风味）越来越淡，反倒是柠檬的苦涩酸更加明显，毕竟里面有整整八片柠檬片，看当量差不多是半个柠檬。此外，如果短时间内饮用，糯米的味道便会淡下去；隔段时间去品尝，却又能重现出袜子味道。这股味道很是打断思绪，写这篇博文中途打了一把雀魂，打到一半突然脑子抽风想喝一口，结果当时脑子就断片了，一时间没想到该切什么牌出去。</p>
<p>喝完这杯糯香柠檬茶，我也算是开始理解为什么会有人喜欢脚，并且以舔脚为乐了。这种醇厚而又粘稠的气味 / 味道，于普罗大众而言确实是一片陌生领域，而他们却愿做第一个舔脚的人，致力于品尝每一处尚未被开舔的区域，这何尝不是一种伟大的开拓精神。</p>
<p>我大概是喝坏脑子了。</p>
<p>附上图片几张<br>
<img data-src="https://cdn.yuuu.org/post-img/15/1.webp" alt="" loading="lazy"><br>
<img data-src="https://cdn.yuuu.org/post-img/15/2.webp" alt="" loading="lazy"><br>
<img data-src="https://cdn.yuuu.org/post-img/15/3.webp" alt="" loading="lazy"></p>
]]></content>
      <categories>
        <category>探索</category>
      </categories>
      <tags>
        <tag>探索</tag>
      </tags>
  </entry>
  <entry>
    <title>16. 一周年简记</title>
    <url>/post/34453.html</url>
    <content><![CDATA[<p>居然已经是一周年了。<span id="more"></span></p>
<h2 id="数据表现">数据表现</h2>
<p>先来看看 umami 的数据吧。</p>
<p><img data-src="https://cdn.yuuu.org/post-img/16/1.webp" alt="" loading="lazy"></p>
<p>自二三年八月份使用 umami 统计以来，总计有 2.23k 的浏览量，访客数为 615，其中停留时间为 1m5s。当我看到这个数据的时候，反而感觉有点惊奇，想不到这一年以来，居然有这么多人看过我的博客。</p>
<p>umami 列出了最常访问的网页和 HTTP referer，这两项数据倒是并不让我意外，最常被访问的是博客主页，其次是友链，但其三是关于 ssh 的讲解，这倒是让我感到意外，毕竟我只是照着 man ssh 和 tldr ssh 的说明，一半翻译一半添上自己的理解，所写成的文章，然而浏览量却不错，难不成大家都懒得去看英文文档吗（笑）？不过也许这些流量可能是一位博主带来的，他在他的博文中有将这篇博文作为引用。</p>
<p>最令我意外的时候，怎么连 bangumi 和 cinemas 也能上榜，这明明只是我的追番 / 剧列表，能上榜只可能是有些人搜一些番剧名字的时候误入了吧？</p>
<p>而来源域名中，最多的是直接访问，这很合情合理，一个友链稀少，seo 低下，内容也较少的博客，搜索引擎怎么会中意呢？不过总还是有一点点的，有意思的是其中 yandex 居然能以微弱优势胜过 google。此外，有几十个小伙伴从友链中跳到了这边。</p>
<p><img data-src="https://cdn.yuuu.org/post-img/16/2.webp" alt="" loading="lazy"></p>
<p>接下来是访客的设备们，这也许没什么可以多说的，浏览器的占大头的便是 chrome，不过我没有看到其他的小众一点的浏览器，恐怕这些浏览器都被算成 chrome 了。</p>
<p>Operating System 中，大头的是 windows、Android、Mac，有趣的是，怎么还混入了一个 win8 和一个 win8.1，至于未知的 os，这可能是赛博幽灵！</p>
<p>设备方面则是笔记本占大头，我之前完全没有想到会是这个情况，我一直以为台式机依然是主流，但实际上我错了，就本站的数据而言，现在已经来到了笔记本流行的时代了。</p>
<p><img data-src="https://cdn.yuuu.org/post-img/16/3.webp" alt="" loading="lazy"></p>
<p>访客国家 / 地区中，大中华区以绝对的优势占据了绝大多数的访问量，毕竟此博客为中文博客，传播范围恐怕也只能覆盖到汉字所覆盖到的地区。我之前有想过是否要撰写英语版的博客，顺带提升下英语写作水平，不过考虑到自己博客连月更都做不到，还是打消了这个念头。</p>
<p>此外还能看到一些其他国家零零散散的访问量，诸如法国之类的，但我总感觉这些访问是由爬虫发起的，早些时候用 cloudflare 统计的时候，总是能看到西欧的爬虫访问。</p>
<p><img data-src="https://cdn.yuuu.org/post-img/16/4.webp" alt="" loading="lazy"></p>
<h2 id="想法">想法</h2>
<p>这一年以来，我总共更新了 16 篇博文（包括此篇），写下 39k 的文字，看到这些数字，总感觉不是自己做到的。在我看来，写博客，从来都是投入产出比小的事情。我自认为写作并不是一件轻松的事情， 一篇博文前前后后需要花费数个小时才能成型，然而哪怕是这样子，写出的文章的质量也是难以让自己认同。当新鲜感已过去，自然也就毫无想继续写下去的心情了。</p>
<p>有段时间，我几乎难以去更新一篇文章。</p>
<p>很多知识性的东西，早在我知道之前，就有人已经写过相关的文章了，我再写，完全是多此一举。而分享日常的话，很多事情固然有意思，然而自己的文笔实在是无力写下，故不敢尝试，且我算是一个腼腆的人，分享自己的故事那种事情实在做不到。至于写一些读书笔记或者是观后感，我想比我擅长的人大有人在，我实在是不太敢动笔。因此，我对于那些能时常更新的博主表示敬意，我深知道他们的更新的背后需要付出多少努力与坚持。</p>
<p>不过这一年过来，我感觉最大的收获便是通过博客这一工具 / 渠道 / 平台，我认识到了众多的博主。他们在自己的一方世界，留下了一点文字，供人阅读。每位博主都有其独特的视角和风格，让我得以拓宽视野，学习到许多新知。</p>
<p>惭愧的是，我时常感到自己的作品略显单薄，难以与众多优秀的博主相提并论。因此，我一直都不太愿意去主动与他人交换友链。然而，大家总还是热情的，看得出我的尴尬，愿意主动与我交换友链。在此，感谢每一位愿意与我交换友链的博主。</p>
]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>17. 享受 -- 富桂糯糯茶</title>
    <url>/post/52588.html</url>
    <content><![CDATA[<p>还是在 q 群中，有一条聊天记录评论道：「蜜雪冰城新出的富桂糯糯茶喝起来的味道就像是在对着小萝莉狂舔狂吸的感觉」。听到这里，我岂有不尝之理。<span id="more"></span></p>
<h2 id="第一杯-🧋">第一杯 🧋</h2>
<p>在富桂糯糯茶的点单界面中，居然新增了一个「温热」的温度选项，正好满足了上次吃糯香柠檬茶的遗憾 —— 没有试着加热再喝。听说加热到体温区间再去喝，可能会有无以伦比的享受。这一次可以试着选一次温热。原本我是想选的无糖，继续去挑战糯糯的奇妙味道，但是据说这款富桂糯糯茶其实没有浓郁的气味，反而是有着桂花沐浴乳味，所以应该选的正常糖，享受香甜口感。</p>
<p>首先刚刚拿到这杯饮料的时候，标签上写到「温热、正常糖、芋圆、糯米粒、桂花、奶基底」，咋一看，这个料还是十分的充足的，我甚至对于它有加到芋圆而感到有点惊奇。</p>
<p>杯的底部可以看到有一点固体，应该就是芋圆、糯米糍和桂花。这个价格能加这么多这些小料，放在蜜雪冰城还是有点少见。</p>
<p>第一口，吸上来了三个芋圆、一些桂花、几粒糯米还有温热的奶。出于我对「糯」字与「脚」的关联的影响和我一边看着聊天记录的影响，我的第一感觉就是现在正在吸着小萝莉的脚丫，三个芋圆对应三个脚趾，温热的口感，浓郁的奶香。夹在芋圆与奶中的糯米则是更加的完善了口感，刚刚入口会有一种软软的糯感，但是只要舌头稍稍用力，糯米糍就会开始形变，像极了小萝莉软软的身躯。而桂花则丰富了口感的，让人感觉并不是在简单的舔着光脚，而是舔着穿着丝袜的脚，有一种莫名的磨砂感。第一口的感觉，用一句话总结就是：这确确实实就是小萝莉奶香味道！</p>
<p>第二口，我选择将吸管稍稍向上提，喝一口毫无佐料的奶。稍稍带着一点点桂花香，但是更浓郁的是奶的味道，这种味道实在是独特  <s>其实就是奶基底而已</s>，十分的符合我对于小萝莉体香的想象。</p>
<p>后边那几口，我便是随意的喝了，时不时就能喝到一口芋圆，几乎每一口都能喝到一点糯米糍，在喝到前两者的同时，总感觉有一些桂花碎参杂在其中，稍稍让软糯的口感多了几分棱角，层次实在是丰富。</p>
<p>一杯下来，我感觉网上的描述是很传神，这确确实实是「有一种抱着刚洗完澡的小萝莉狂吸狂舔的感觉」。这一杯富桂糯糯茶给我的印象就是：更像是给小萝莉泡牛奶浴，并在浴缸中撒下桂花，等到馥郁芬芳之后，对着小萝莉狂舔的感觉。芋圆的口感就像是在轻咬小萝莉吹弹可破的富有弹性的皮肤一般；在奶中的桂花就像是牛奶浴中的桂花靠着牛奶的黏附力缠在小萝莉的身上，尝的时候就是舔着小萝莉身上的桂花，将身上的奶液和桂花都一同的舔走一般；隐藏在其中的糯米糍则是充当中和的作用，为其注入柔和的口感，尝起来宛如柔肌腻肤一般。</p>
<p>而喝完之后，留在嘴中的余香，味道就像是狠狠的将头闷在刚出牛奶浴的小萝莉胸前吸的那种感觉。尽管舌头所带来的香甜已经消散，然而气味依旧芬芳扑鼻，早已沁人心脾。</p>
<p>写到这里，这一杯富桂糯糯茶就喝完了。🧋</p>
<h2 id="第二杯-🧋🧋">第二杯 🧋🧋</h2>
<p>也许是太好喝了（相对于糯香柠檬茶），还没写完就把上一杯喝完了，喝完了之后，思路自然是断了。思路断了，但是文章却是没写完，于是打算在下一天再点过一杯，再续一下灵感。第二杯我点的是芝士奶盖富桂茶，她与富桂糯糯茶同在一个分区，贵了一块。温度选项中居然有热这个选项而不是温热，那我自然要点热的。正当我以为这不过是入口之后，却发现芋圆不见了，芝士奶盖富桂是没有芋圆和糯米糍的，只有少量的桂花。我直呼「上当了」！而且，虽然说是有着芝士奶盖，但是温度为热的奶盖早就融入奶茶中了，将吸管放到上层，才勉勉强强的尝到一点来自芝士的乳脂香和盐味，这实在是有点尴尬。而且，缺少了芋圆和糯米糍的桂花茶，总感觉少了很多精髓，尝不出昨天所写的那般小萝莉那肤如凝脂的口感了。总之，这杯芝士奶盖富桂茶真是狡猾！更像是来捉弄人的小恶魔，最关键的是我还中了她的奸计！这下我的写作必须要等到明天再买一杯了。</p>
<h2 id="第三杯🧋🧋🧋">第三杯🧋🧋🧋</h2>
<p>总感觉已经写的差不多，哪怕是第三杯下肚，我也写不出什么了。这一杯，我用来对前面所写的进行订讹补缺。果然芝士奶盖富桂茶是无法代替富桂糯糯茶的，我刚刚喝上富桂糯糯茶就写的出我想要的东西了。也是在这一天，我才发现，其实芝士奶盖富桂茶并没有骗我，她确实没有「糯糯」这两个字，所以也就理所当然的没有糯米糍了，然而她们两者味道的差别实在是太远了。</p>
<h2 id="第四杯和第五杯-🧋×5">第四杯和第五杯 🧋×5</h2>
<p>一天周末，我正愁喝点什么，突然想起我还没喝过冷的富桂糯糯茶呢，点杯试试。到店里拿到这杯琼浆玉液，寒气外露，稍稍冰的手有点点发麻。将吸管插入到最底部，想着将美味的芋圆、桂花、糯米糍都一口打尽。然而或许是因为温度太低？底部凝结成块，完全吸不上来。费了点劲调整吸管，总算是吸上了一口奶液，带上了一点糯米糍。低温环境下的糯米糍比温热情况下的要凝固多了，也正因为才无论如何也吸不上吧。然而，这第一口可真让我惊喜！入嘴的那份冰凉渗透入口腔，直冲冲的涌上大脑，一扫饭后疲倦，意识直接清醒了三分。随后这份冰凉便顺着既定之路，沁入心田。啊，居然是完全不同的意象！完全不同于温热下的那般香温玉软，而是另一种冷而透彻的清晰感。我搅动吸管，寻到一处完美的切入点，深入，吮吸。这一次总算是喝到了完美比例的糯米糍桂花奶液。此刻，我仿佛进入了人天合一之境。</p>
<p>闭上眼，早已有一位佳人在等候我。她浑身散发着冷若冰霜的气息，盯着我。也许我做错了什么，寒气冷的我稍稍有点想打寒颤。不过哪怕她摆起一副生人勿近的架势，我也早已做好了只要能碰到她，哪怕交出这条命也算值了的觉悟。放空自我，提气身轻，来到她的身旁，直接对着她的脸蛋就是一掐，手感就像是雪媚娘一般，或者说也像是杯中那温度稍低的糯米糍一般。从手中传来的温度也如同她的气质一般，冰冷。她就如同高岭之花一般，浑身都冒着生人勿近的气息。但是此时的我早已进入自己的鬼神境。完全无惧此等压力，对着她就是各种揉揉亲亲。可以看的到她眉头一挑，小嘴一嘟，有什么不满。尽管也许她不喜欢我这么做，不过还是由着我这么继续玩下去。</p>
<p>当然，对于每一位小可爱，我都是要尝一口的，这一次也不例外。一口下去，尝起来的味道就像是一口就化的冰淇淋，甜口却不腻。她也许是再也受不了了，双手放在我胸前，一送，将我推回了现实！</p>
<p><s>奶茶喝完了，这只不过是奶茶喝完前的幻想和幻视罢了。</s></p>
<h2 id="念念碎">念念碎</h2>
<p>为什么我对这杯饮料这么痴迷呢？真是搞不懂。明明应该只是普通的一杯饮料，但是只要是喝完了，我的灵感就再也冒不出来了。<s>也就再也没法发电了</s></p>
<p>写这篇博文写到一半，总感觉自己写的实在是太过于下流变态了。此等文章，发布于互联网，是否会有不太好的影响？尽管自己内心也是十分的动摇。但是，如果不发表，那我辛辛苦苦所写的又是为了什么？</p>
<p>正当自己在胡思乱想的时候，想到一段话，大概意思是：「如果害怕被封就不发，不就是等于被封了吗？」尽管这篇文章并没有上升到会被封与否的高度，但是这句话也是明确的表明了一个观点：做总是比不做要好。想到这里，我也是放下了心中的顾虑，直接发表！毕竟很多时候，怕后悔而不去做，总是比做了以后而后悔，让人更加的后悔。</p>
<p>但是，当我对文章补阙拾遗的时候，我看到我之前写的那些又舔又闻的文段，真的是令自己都有点看不下去。我究竟在写的什么？🤣</p>
<p>在写的途中，我总是时不时感觉到自己的文笔还是太弱了，想去描述一下文中萝莉们的模样的时候，怎么都写不自己满意的文字。这也许就是一些小说文段中所言的「不可描述之美吧」。</p>
<p>不过都无所谓了，写这一篇文章，不过是稍稍将脑中欢乐之事分享给诸位，倘若能博你一笑，那也是我的荣幸。</p>
<h2 id="无关紧要的图">无关紧要的图</h2>
<p><img data-src="https://cdn.yuuu.org/post-img/17/1.webp" alt="" loading="lazy"><br>
<img data-src="https://cdn.yuuu.org/post-img/17/2.webp" alt="" loading="lazy"></p>
]]></content>
      <categories>
        <category>探索</category>
      </categories>
      <tags>
        <tag>探索</tag>
      </tags>
  </entry>
  <entry>
    <title>18.kindle 的实际体验</title>
    <url>/post/25777.html</url>
    <content><![CDATA[<p>毫无疑问的是，这块 kindle 是买给那个喜欢跟风的自己。<span id="more"></span></p>
<h2 id="之所以想买">之所以想买</h2>
<p>好像大概是在那个疫情的时候，那时候，莫名奇妙的能收到很多关于「信息节食」之类的话题，大概意思就是信息好多，需要少看一点手机，少接受没有用的信息。大家好像都在分享着怎么做到不去被互联网上的信息所干扰自己的方法。而方法无非就是尽可能的去做能代替使用手机的事情，比如出游、看书、整理之类的。在那个背景环境下，kindle 以所谓的「只能看书，墨水屏护眼」的特点成为了许多文章中所谈到的信息节食的利器。而我从来都是一个喜欢随波逐流的人，当时看完了几篇文章之后，就想着要不要买一台回来试试。</p>
<h2 id="从不买到买">从不买到买</h2>
<p>正巧朋友有一台，我便借用了一周。那一周里，除了刚借到手的一个小时，和即将还回去的那一天以外，我都没有去碰过 kindle。这下让我确定了，kindle 对于我来说除了吃灰以外没有任何作用，毕竟我甚至都不吃泡面，它连当泡面压的机会都没有。🤪<br>
时间来到现在，我又在机缘巧合的情况下，又一次的刷到了关于 kindle 的文章。因为此时的 kindle，已经宣布退出了中国市场，互联网掀起了小小的讨论。正巧手上还有点余钱，也是想圆以前的自己的愿望，我买了一台二手的 Kindle Paperwhite 3。</p>
<p>拼多多上售价 355，屏幕完好，周边划痕少，还附送了膜和保护壳充电器和充电线。</p>
<h2 id="买到之后">买到之后</h2>
<p>收到货之后，赶紧带着它躲进被子里看看不开背光的情况下到底有多亮。结果也是理所当然的，什么都看不见，不过也是可以感知到一点点的背光，但是除非是在完全黑暗的情况下，不然这个光恐怕还没地上的路灯漫反射进屋子里的亮。晚上夜深人静的时候，打开背光看小说，更像是手机开了很深的护眼模式，有着一种古卷的黄。不过与手机相比，Kindle 更加轻便，掉下来砸脸上也不那么疼。</p>
<p>说了这么多，那么，kindle 有给我的生活带来什么不同吗？答案是：我拿它来看漫画！</p>
<p>我用它看完了《魔都精兵的奴隶》，不得不说的是，看着 kindle 显示出来的黑白漫画，真的让我感觉回到了在图书馆看《火影忍者》的那段时光，整体的显示都非常的好，或者说作者的画工十分的精良。但是我在导入 epub 格式的《电锯人》的时候，却发现无论怎么调整，都会有白边，这可真是为难了 epub 格式的漫画了，也不知道是不是只有《电锯人才有这个问题》</p>
<p>而且，因为买了 kindle，我又像早些年那样，熬夜看小说了。这当然也难不倒我，我直接找了一本《睡眠革命》来看，说不定有助于我的睡眠。不过话说回来，我总感觉这些书本有点读的无聊，有些几句话就能说完的方法，要牵扯出各种例子和成果，最后长篇大论的确实挺能让人想睡觉。也许这就是这类工具书能被称之为书的原因吧，像我这种博客，怕不是要写上五六十篇，才能做的有别人一半厚度。</p>
<p>至于电量，这点确实没法说，不读的情况下真就几乎不耗电。距离我上一次数据线传书已经过去了 20 天了，但是电量却还有 50%。我大概平均每天会拿起来看一个小时，开着背光等级 8，这续航让我感到很吃惊。kindle 这高续航的优点，让我认识到「电纸书」中的「纸」的感觉。拿在手中，总是能让人忘记掉电量，真真切切的让人感受到了这就是一本稍稍用特殊的纸呈现出来的书，而不是那种必须依靠电源为生的电子产品。</p>
<p>虽然有了 kindle，但是其中的图书资源几乎都是从各大盗版网站中搜罗来的，这点自然是大大的不好，所以我还是打算每读完一本，或多或少的写下一点点的读书笔记，算是为这本书打一下小小的宣传吧。但是我又不太清楚该怎么处理，如果我每一本都长篇大论的话，会占用太多的精力与时间，而且我的文笔可能完全支撑不起这般长篇输出。如果只是随手写写的话，那么篇幅太短，但是却又算一篇博文的话，也太随性了吧，我自己都无法接受。</p>
<h2 id="小小意外">小小意外</h2>
<p>在买 kindle 的时候，卖家表示可以帮我刷安卓系统，不过我当时感觉 kindle 只是用来看书的，就没想着去刷。我的读书习惯更像是传统派，只读纸质书。对于手机上的阅读我一律都认为是消遣阅读，而非纸质书这边的严肃文学。而且，我也没想出安卓系统有什么便利的读书软件。说的出名字的阅读软件几乎都是用来看网络小说，还有一些小众一点的软件则是搜刮互联网上的书源，访问起来也有点不稳定，质量也可能是参差不齐的。</p>
<p>后来询问一番才发现大家对微信读书几乎是好评如潮。我也尝试了一下。用它来在手机上读书更加的方便，而且还有其他的书友对精彩的句子进行划线和分享观点，这可比自己一个人读书有意思多了。可惜我没能早点知道微信读书。于是，kindle 又一次的吃灰了。</p>
<p>截至我写完这个文章为止，我都没有在 kindle 读完一本书，反而是已经在微信读书上读完了两本书了。</p>
]]></content>
      <categories>
        <category>探索</category>
      </categories>
      <tags>
        <tag>探索</tag>
      </tags>
  </entry>
  <entry>
    <title>19. 一年之始</title>
    <url>/post/33493.html</url>
    <content><![CDATA[<p>又到一年之始了，原本我想着要不要更新一篇年终报告什么的。但是我发现去年的我没有写，那么理所当然的，今年的我当然也可以不用写年终报告！年终报告什么的？与我这个小透明无关！<span id="more"></span></p>
<h2 id="前言">前言</h2>
<p>尽管说是没必要写什么年终报告，但是我还是想在今时今刻，这个还尚且能算是一年之始的时间段，写下了这篇博文。</p>
<p>这段时间，我开始变得有空起来，得以找到时间去回想过去一年干了什么。唏嘘的是，在自己的脑子里面转了一圈，翻出来的都是去年看过的印象深刻的番剧啊漫画啊之类的。至于自己的生活到底有什么亮眼的，出乎预料的没有留意到。也正因为如此，我更加的认为有必要特别的在一年之始写一下博文警惕自己。</p>
<h2 id="想通的事情">想通的事情</h2>
<p>我，一直都是一个比较悲观的人，不认为自己活着有什么意义，对很多事情都不算提得起兴趣，为数不多的兴趣就是一个人沿着冷清的小道走。这个兴趣愈演愈烈，今年甚至已经成为了习惯，睡前一定要出去走走。但是就是这日复一日的在漆黑中漫步，我渐渐的想通了一点事情。</p>
<h3 id="其一">其一</h3>
<p>其一、过去没有改变，未来仍遥不可见。</p>
<p>我走在黑夜之中，我能确定的是，我走了哪些路，这些路不会在我走之后突然改变，也不会因为我再往前走几步就会开始扭曲变形。而前方因为路灯尚且在遥远的地方，我没法看清前方的路面，尽管我每天都会走这条路，但是每天这条路的情况都不一样，有时有枯枝落叶挡路，有时则是莫名的多块石头，甚至有一次树木倒下，横断了道路。所以，尽管是熟悉的道路，但是未来仍遥不可见。我仍有可能遇到什么事情。</p>
<p>也许这么说有点玄而又玄，通俗一点讲。我无论怎么努力，我之前的所有作为都不会改变，无论做什么，过去的事情就是过去了，我们无法改变它，我已经书写下了我所过去的人生，它们已经是历史的一部分，无法重新塑造。</p>
<p>至于未来仍遥不可见这句话。人的未来，总是无法被预见的，或者说，任何的规划都是有可能被打乱的，当人开始担心自己的规划会不如心意的时候，就会焦虑。大至升学考试，小至明日的闹钟，都可能让人心中一悸。罗贯中早就说过：谋事在人成事在天。未来是未曾发生的，它依然处于我们视野之外，难以预测。尽管我们可以规划和预期未来，但它依然存在太多变数和不可知的元素。</p>
<p>这么听起来或许更加的悲观了？但是我能确定的是「唯有现在才是我们真正能把握的时刻」要知道，我现在可是走在路上，我完全能掌握我接下来该走哪一步，我也能发挥自己的主观能动性，去观测我所能观测到的前方，尽我所能的去规避障碍。</p>
<p>结论便是，每个人都必须承担起自己的选择，接受自己的决定所带来的后果，而前路哪怕黑暗，我们也应该做出选择。</p>
<h3 id="其二">其二</h3>
<p>其二、重要的不是被给予了什么，而是如何去利用被给予的东西。</p>
<p>我之前一直都厌恶自己的身体，它总是过敏，而且对流感几乎是没有抵抗力，畏寒，气短且气促，我一直都感觉这副身体拖累了自己。</p>
<p>然而，当我在严寒中外出的时候，我却注意到，身体渐渐从战栗打颤调整发热出汗，甚至在散步的后半段，我还得脱下衣服的时候，此时此刻，我才感觉自己的身体其中蕴含的力量。</p>
<p>外周神经系统中的温度感受器感受到冷。皮肤中的冷感受器会被激活，向大脑的下丘脑传递信号。下丘脑开始激活一系列生理机制，来提高体温。于是，血管收缩、产热反应、增加新陈代谢，最后得到了身体发热这一结果。</p>
<p>尽管我并不满意我的身体，但是由自我意识控制不到的外周神经系统给了我温暖，稍稍还是让我发楞了。此时的我温暖的手掌，算是身体给灵魂的一个小小的抱歉？</p>
<p>回想起之前所学的，人类是多细胞生物，交感神经系统和副交感神经系统负责调节许多生理活动，如心跳、呼吸、血压、体温。这个系统是完全不受我们的主观意识控制的，它能自动感知身体的状态并进行调节，以保持身体的内稳态。</p>
<p>这不得让我想起我去年最沉迷的一个游戏–《群星》。其中有一个政体是格式塔，简单的说，就是只有一个永恒寿命的领袖，而人口都是无数的「自己」。每个自己都在为自己的帝国的繁荣而奋斗，没有普通国家的所谓幸福度的说法，也不需要特地的加工消费品来满足人口需求。</p>
<p>你说，这像不像人体？而我感觉，人就是自己的格式塔，既然我的身体将它的主动权交给了名为「自我」的首脑，那么这个首脑自然而然的应该负责起带领这群细胞走向更好的生活。最起码的，不应该让它们因为首脑的一个不高兴而一起毁灭。首脑哪怕再累，也要清楚明白自己的之所以能感觉到累是因为其他的子个体为自己创造了这个环境。虽然子个体感觉不到累，但是它和首脑总是一损俱损，一荣俱荣的，是平等的存在。这么一来，在消极念头出现的时候，是否又能多想一层了呢？毕竟，奋斗的从来都不是一个个体，而是其名为「人」的多细胞联邦。</p>
<p>尽管作为人，我们遇到了很多的挫折，生活充满了不确定和挑战，但我们不能忘记，正是因为我们每一个细胞和每一部分的存在，才能使得这个身体得以运转，才有了今天的自己。即使在最黑暗的时刻，自我依然应当坚信，哪怕一时感到迷茫、痛苦，这些都是整个身体在向前进的过程中不可避免的试炼。</p>
<h2 id="于是">于是</h2>
<p>于是，这恐怕就是我去年最大的收获了吧。</p>
<p>当我总算战胜了虚无主义，重新面对世界的时候，发现世界上确实有很多的我从没遇到的乐趣，比如一个人独享一升的酸奶，一觉睡到中午，每周末都吃披萨，看一本漫画。现在想想，这些乐趣简单且繁多，如果没体验过就归西了，确实是对人生的大不敬。</p>
<p>要写的就这么多了，要做的事情还有很多的说。</p>
]]></content>
      <categories>
        <category>思考</category>
      </categories>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title>2. 多抓鱼之旅，买一本二手书</title>
    <url>/post/19178.html</url>
    <content><![CDATA[<p>前段时间在学校图书馆看到一本书，叫做《常识》，于 2009 年出版，由梁文道所著。我个人感觉里面的内容还不错，想入手一本。但是图书馆不可以外借，而且那时的自己也要离开这个有图书馆的校园，这本《常识》也就没法再看了。<span id="more"></span>本想着如今网购便利，实在不行就去到网上 “网淘” 一本回来，可这本书看上去好像是停止了印刷，在出版社 "广西师范大学出版社" 的淘宝店上没有找到，在出品方 "理想国" 的京东店上一直显示无货，而且评论也停留在 21 年。目前看来，官方渠道应该是买不到了。</p>
<p>如果是去其他电商买这本书，给出过的价格有高有低。要么是当缺货书卖，价格动辄 50＋ RMB。要不就是用着淘宝默认名字的店铺（如 tb1234xxx567），虽然价格合理，但是却怕买到盗版书。</p>
<p>所以说，目前看来，网购这本书的计划不算顺利。而这本书大概是从零九年开始发行的，而且至少直到 2021 年都还在印刷，持有的人也许很多，也许可以从二手书渠道中入手。</p>
<p>我所在的城市的二手书店早就关闭的七七八八了，所以，只能求助于二手平台了。一番寻找下，我选中了多抓鱼这个二手平台，里面果然有这本《常识》，只可惜没货。加入到货通知后，又过了几天，通知我有货了，我一看，上面标记着 “可拆卸外封套缺失、有划线或标注、轻度污渍”，咋一看，在我的观念看来，这本书已经算是废书了，但是当时确实是着急入手这本书，也就干脆买入了。<img data-src="https://cdn.yuuu.org/post-img/2/1.webp" alt="" loading="lazy">最后实付 13.73 元 ，价格方面很满意。</p>
<p>到货后， 这本书的品质超乎我想象。书本内部的书页间虽然会有较大空隙，但是完全不影响平时的摆放。书页中蕴含着淡淡的清香，应该是用了一些消毒剂和清新剂，除去了一些异味，但是也没有了书本特有的书香。不过按照我的经验，13 年前的书（10 年印刷）放到现在，不加以处理的话，灰尘的味道可能大于书香吧，用清新剂处理二手书也无可厚非。至于 “有划线或标注” 这一项，其实书中并没有太多的划线部分，全书翻遍，可能也就 5 处细微划线。这些划线其实完全不影响阅读。再者，如果原书主是位文学大师，说不定一番圈划下来，还可以助我理解文章呢。😂</p>
<p>总得来说，第一次的二手淘书经历让我比较满意，二手书市场确实有待挖掘，期望日后可以用二手的方式，更便宜的获得知识。</p>
<p>多提一嘴，在我写这篇博客的时候，多抓鱼那里居然又有品相良好的《常识》了，而且只卖 12 元，我感觉我亏了一个世界。</p>
<p>以下是这本书的实拍。分别对应：</p>
<ol>
<li class="lvl-3">
<p>书本正面的样子</p>
</li>
<li class="lvl-3">
<p>书页间的间隙</p>
</li>
<li class="lvl-3">
<p>书中的一些圈画</p>
</li>
</ol>
<p><img data-src="https://cdn.yuuu.org/post-img/2/2.webp" alt="" loading="lazy"><br>
<img data-src="https://cdn.yuuu.org/post-img/2/3.webp" alt="" loading="lazy"><br>
<img data-src="https://cdn.yuuu.org/post-img/2/4.webp" alt="" loading="lazy"></p>
]]></content>
      <categories>
        <category>经历</category>
      </categories>
      <tags>
        <tag>经历</tag>
      </tags>
  </entry>
  <entry>
    <title>20. 什么是形而上学</title>
    <url>/post/20066.html</url>
    <content><![CDATA[<p>形而上学，这是一个难以望文生义的词语。在现代汉语语境下，「形而上学」这一成语大多带有教条、不合时宜、脱离现实的含义。在成语字典中的解释是用孤立静止片面的观点看世界。然而果真如此嘛？<span id="more"></span></p>
<p>然而，在我尚小的时候，我实在难以理解形而上学为什么会与孤立静止片面扯上关系，毕竟他们看上去并无联系。甚至，对于我来说形而上学这四个字，更容易被拆分成「形而」和「上学」，表示「装模作样的去上学」(大误！)。</p>
<p>更头痛的是，只要上网去检索形而上学，结果大多都是关于哲学方面的信息，几乎没有人会详细说明为什么形而上学是代表了孤立静止片面。</p>
<p>所以，我很希望能够彻底搞懂这是怎么回事，而写下这篇文章。那么这篇文章就当作是给小时候的自己一个答案吧。</p>
<h2 id="什么是形而上学">什么是形而上学</h2>
<p>先来说说形而上学是什么，当然，我指的是最初的形而上学，而不是在汉语语境下的形而上学。</p>
<blockquote>
<p>形而上学，简称形上学，也称为形之上学（英语：Metaphysics），在古希腊时期指研究存在和事物本质的学问。形而上学是哲学的一个分支或范畴，被视为首要哲学和「哲学的基本问题」。对于不能直接透过感知所得到答案的问题，它在先验条件（可看成公理化的假设）下，透过理性的逻辑推理推演出答案，并且不能与经验证据相矛盾。它是人类理性对于事物最普遍的面相和终极的原因的探索的一门学科。</p>
<p>– from <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLWNuLyVFNSVCRCVBMiVFNCVCOCU4QSVFNSVBRCVCOA==">wikipedia.org<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>什么？看不懂？什么是先验条件？什么是经验证据？亦或者说，连形而上学都没看懂？没事，先抛开那些先验条件经验证据，我们还是先来说说形而上学的由来吧。</p>
<h2 id="形而上学的由来">形而上学的由来</h2>
<ol>
<li class="lvl-3">
<p>形而上学的名称由来</p>
<ul class="lvl-2">
<li class="lvl-6">
<p>古希腊语中，「μετά」（meta）意为「之后」或「超越」，「φυσικά」（physika）指「自然的事物」。亚里士多德的学生在整理其著作时，将探讨抽象原理的文本置于《物理学》之后，命名为《形而上学》（Metaphysics），两个字根组合起来 μεταφυσικά 的意思就是「在自然之后」。</p>
</li>
<li class="lvl-6">
<p>中文译名「形而上学」是由日本人井上哲次郎（明治时代）由 metaphysic 翻译而来。取自《易经・系辞上传》「形而上者谓之道，形而下者谓之器」一词。</p>
</li>
</ul>
</li>
<li class="lvl-3">
<p>那么什么是 <strong>「形而上者谓之道，形而下者谓之器。」</strong> ？</p>
<ul class="lvl-2">
<li class="lvl-6">
<p><strong>形而上</strong>：指的是超越物质形态之上的存在或概念，是无法直接感知但可以通过思维去理解的存在状态或原则。简单来说，「形而上」探讨的是宇宙间无形的原则、法则或是道理，即所谓的「道」。</p>
</li>
<li class="lvl-6">
<p><strong>道</strong>：在这里可以理解为万物运行的根本法则或宇宙的本原。</p>
</li>
<li class="lvl-6">
<p><strong>形而下</strong>：相对「形而上」而言，指的是具体的、有形的事物或现象，是可以被感官直接认知的世界。这包括了一切物理存在的物体及其属性，如大小、形状、颜色等特征，以及由这些具体事物构成的各种器具、工具等。</p>
</li>
<li class="lvl-6">
<p><strong>器</strong>：指具体的器物或者工具，代表了实际的应用层面。例如，刀剑为器，房屋为器，任何实用性的物品都属于这一范畴。</p>
</li>
</ul>
</li>
<li class="lvl-3">
<p>为什么这么翻译？</p>
<ul class="lvl-2">
<li class="lvl-6">亚里士多德的形而上学研究的是超越具体事物的本体，这一点正好与《易经》中的「形而上」概念吻合。而 Metaphysics 探讨的是超越物质的终极原理，类似于《易经》所说的「道」。</li>
<li class="lvl-6">「学」表示系统化的学问，因此译为「形而上学」。</li>
</ul>
</li>
</ol>
<p>因此，<strong>「形而上学」作为译名，不是音译，而是基于《易经》的哲学概念进行的意译。</strong></p>
<p>不得不说，这个翻译真的挺不错的，但是，在现代，易经已经不是必修课了，普通人（也包括我）连「形而上者谓之道，形而下者谓之器」都看不明白，怎么可能通过这句话来推断形而上学这个成语到底想表达什么意思呢？😅</p>
<h2 id="形而上学为什么会贬义">形而上学为什么会贬义</h2>
<p>好了，回归正题。既然已经解释了形而上学的原本意义，那为什么如今的形而上学却会被扣上孤立静止片面的帽子呢？</p>
<p>这可能与恩格斯在《反杜林论》及其他著作中的批判有关。在《反杜林论》中，恩格斯批判了机械唯物主义，这种观点将一切现象简化为物质及其运动形式，忽视了事物间的相互联系和发展变化。恩格斯认为，机械唯物主义者往往采取一种孤立、静止和片面的方式来看待世界，这种方法被他称为「形而上学的思维方式」。这里，恩格斯并不是在讨论传统的形而上学，而是借用了这个术语来描述一种特定的、缺乏辩证思维的思考方式。</p>
<p>原文大概就是这一段：</p>
<blockquote>
<p>但是，这种做法也给我们留下了一种习惯：把自然界的事物和过程孤立起来，撇开广泛的总的联系去进行考察，因此就不是把它们看做运动的东西，而是看做静止的东西；不是看做本质上变化着的东西，而是看做永恒不变的东西；不是看做活的东西，而是看做死的东西。这种考察事物的方法被培根和洛克从自然科学中移到哲学中以后，就造成了最近几个世纪所特有的局限性，即形而上学的思维方式。</p>
<p>– 引自 <span class="exturl" data-url="aHR0cHM6Ly93d3cubWFyeGlzdHMub3JnL2NoaW5lc2UvbWFyeC1lbmdlbHMvMjAvMDAyLmh0bQ==">反杜林论<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>在马克思主义哲学体系中，「形而上学」被赋予了一种特定的负面含义，主要用于批判<strong>形而上学思维方式</strong>，与<strong>辩证法</strong>形成对立：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><strong>辩证法</strong>（dialectics）强调事物是相互联系、不断变化的，具有<strong>矛盾统一</strong>的发展规律。</p>
</li>
<li class="lvl-2">
<p><strong>形而上学思维</strong>（metaphysical thinking）被马克思主义描述为<strong>孤立、静止、片面地看待事物</strong>，即：</p>
<ul class="lvl-2">
<li class="lvl-6">只看事物的<strong>个别属性</strong>，忽略其整体联系。</li>
<li class="lvl-6">只看<strong>静态状态</strong>，忽略其发展变化。</li>
<li class="lvl-6">只看<strong>绝对一面</strong>，忽略矛盾和对立统一。</li>
</ul>
</li>
</ul>
<p>恩格斯在《反杜林论》中明确批判了<strong>机械唯物主义</strong>，称其<strong>以形而上学方式思考问题</strong>，即用<strong>僵化的、孤立的、静止的方式理解世界</strong>，不符合辩证唯物主义的原则。</p>
<p>由于马克思主义哲学在 20 世纪成为中国主流意识形态，并被广泛用于政治、哲学、社会学等领域，「形而上学」作为马克思主义批判思维方式的术语，被大量应用于批评教条主义、僵化思维、不考虑实际情况的做法。</p>
<p>毛泽东《矛盾论》：「在人类的认识史中，从来就有关于宇宙发展法则的两种见解，一种是形而上学的见解，一种是辩证法的见解，形成了互相对立的两种宇宙观。」</p>
<p><strong>由于这些高频使用，普通人对「形而上学」一词的理解逐渐固化为贬义，并且与「僵化」、「教条」直接关联。</strong></p>
<table>
<thead>
<tr>
<th>语境</th>
<th>原义（哲学）</th>
<th>马克思主义批判用法</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>词源</strong></td>
<td>研究超越物理的终极存在、本体</td>
<td>片面、孤立、静止的思维方式</td>
</tr>
<tr>
<td><strong>亚里士多德</strong></td>
<td>研究「存在」和「本质」</td>
<td>-</td>
</tr>
<tr>
<td><strong> 易经</strong></td>
<td>「形而上者谓之道」，指抽象哲理</td>
<td> -</td>
</tr>
<tr>
<td><strong> 马克思主义</strong></td>
<td> -</td>
<td> 教条主义、机械思维，不讲变化</td>
</tr>
<tr>
<td><strong>现代汉语成语</strong></td>
<td> -</td>
<td> 僵化、脱离实际、死板不变</td>
</tr>
</tbody>
</table>
<p>说到这里，我们其实已经可以很容易地得出结论：「形而上学」在中文里的成语用法是马克思主义哲学语境的产物，而非源自其哲学原义。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><strong>「形而上学」原本是哲学术语，与贬义无关</strong>，其意义源于亚里士多德和《易经》。</p>
</li>
<li class="lvl-2">
<p><strong>马克思主义重新定义了「形而上学」</strong>，作为对「辩证法」的对立批判，称之为片面、孤立、静止的思维。</p>
</li>
<li class="lvl-2">
<p><strong>由于马克思主义在中国的主导地位</strong>，这一用法深入政治、社会宣传，导致现代汉语中「形而上学」普遍带有贬义。</p>
</li>
</ul>
<p><strong>换句话说，「形而上学」在汉语中与「孤立片面」相结合，是因为马克思主义哲学话语体系的影响，而不是因为词语本身的逻辑演变。</strong></p>
<p>「形而上学」在学术语境（哲学）与日常语境（中文）含义截然不同，阅读西方哲学时切勿混淆。</p>
<h2 id="最后">最后</h2>
<p>如果你还不懂什么是形而上学？形而上学的本质是什么？不用担心！</p>
<p>因为直到现在，大家都还是没法完全确定形而上学如何定义。</p>
<blockquote>
<p>It is not easy to say what metaphysics is.<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p>
</blockquote>
<p>如果通过这篇文章，你能对形而上学的原义及其在现代语境中的演变有一些了解，那么我认为这篇文章已经达到了它的目的。</p>
<h3 id="一些可能需要的资料">一些可能需要的资料</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLWNuLyVFNSVCRCVBMiVFNCVCOCU4QSVFNSVBRCVCOA==">形而上学 – 维基百科<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzE5Nzc3MDQw">「形而上学」到底是什么意思？ – 知乎<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cubWFyeGlzdHMub3JnL2NoaW5lc2UvbWFyeC1lbmdlbHMvMjAvMDAyLmh0bQ==">反杜林论 – 恩格斯<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cubWFyeGlzdHMub3JnL2NoaW5lc2UvbWFvemVkb25nL21hcnhpc3Qub3JnLWNoaW5lc2UtbWFvLTE5MzcwOC5odG0=">矛盾论 – 毛泽东<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<p><strong>注：本文部分内容由 AI 生成。</strong></p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly9wbGF0by5zdGFuZm9yZC5lZHUvZW50cmllcy9tZXRhcGh5c2ljcy8jTWV0aE1ldGE=">Metaphysics “Stanford Encyclopedia of Philosophy”<i class="fa fa-external-link-alt"></i></span> <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>21. 数字花园是什么</title>
    <url>/post/55162.html</url>
    <content><![CDATA[<p>在翻阅我的 Obsidian 笔记时，我突然翻到一张很有意思的卡片，正是这张卡片，引导我踏入了数字花园的世界。<span id="more"></span>这张卡片的来源是我在 2021 年接触博客圈时的收藏，里面提到了一些与数字花园相关的网站：</p>
<blockquote>
<p>数字花园大概就是一个永远在施工的知识工地，用超链接代替目录，允许思维碎片像野草一样自由生长的地方。</p>
<p>概念来源于</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9qb2VsaG9va3MuY29tL2RpZ2l0YWwtZ2FyZGVuLw==">My blog is a digital garden, not a blog - Joel Hooks<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly9tYWdnaWVhcHBsZXRvbi5jb20vZ2FyZGVuLWhpc3Rvcnkv">A Brief History &amp; Ethos of the Digital Garden - Maggie Appleton<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly90b21jcml0Y2hsb3cuY29tL2Jsb2djaGFpbnMvZGlnaXRhbC1nYXJkZW5zLw==">Digital Gardens - Tom Critchlow<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>当时的我，刚刚接触博客圈，还未能完全理解博客的概念，然而又遇到了一个全新的理念 —— 数字花园。虽然当时我对这个名字很感兴趣，也喜欢它的理念，但我并未深入研究，只是将它记录了下来。</p>
<p>回想起来，数字花园这一概念恰如其分地表达了我对知识的看法和创作方式。尽管我当时对它心生向往，但当时并未真正投入精力去了解，直到今天再次翻到这些卡片，我才决定重新审视这个理念，并把它付诸于行动。</p>
<h2 id="从-Obsidian-到数字花园">从 Obsidian 到数字花园</h2>
<p>我最开始创作的时候，就是用 Obsidian 来记录和组织我的思考。Obsidian 提供的双向链接功能，让我在本地就能轻松地建立起一个网状结构的笔记系统。尽管我其实几乎不会用双向链接，但是我却总是在用随机漫步，不断的去回顾我之前都写了些什么。通过回顾，我能找回许多旧日灵感，也能纠正过去的错误观点。这在我看来也许四舍五入也是一种双向链接了。这使得我的我的本地笔记本身已经在使用数字花园的一些特质 —— <strong>非线性思维</strong>和<strong>渐进式更新</strong>（亦或者说就是，Obsidian 最大的特色就是双向链接，以至于我使用的时候也会不知不觉的被影响）。</p>
<p>然而，问题在于，尽管这些卡片和想法对我来说有价值，但它们基本上是我自己阅读和使用的。这样的方式虽然便于记录，但最终很容易懒散，久而久之也会疏忽掉一些有价值的内容。为了避免这种情况，我决定公开化部分内容，让大家也能看到我的思考和成长过程。公开化不仅能让我保持持续的动力，还能使我在分享的同时，也能从别人的反馈中获得新的视角和启发。</p>
<h2 id="为什么选择数字花园">为什么选择数字花园</h2>
<p>数字花园并不像传统博客那样，讲究<strong>完成度</strong>和<strong>精美排版</strong>，它更像是一个不断生长的温室，内容并不是一成不变的，而是可以随时修改、更新，甚至重新定义。我对数字花园的理解，正如<span class="exturl" data-url="aHR0cHM6Ly9tYWdnaWVhcHBsZXRvbi5jb20vZ2FyZGVuLWhpc3Rvcnk="> Maggie Appleton<i class="fa fa-external-link-alt"></i></span> 所说：</p>
<blockquote>
<p>They’re not following the conventions of the “<em>personal blog</em>,” as we’ve come to know it. Rather than presenting a set of polished articles, displayed in reverse chronological order, these sites act more like free form, work-in-progress wikis.<br>
A garden is a collection of evolving ideas that aren’t strictly organised by their publication date. They’re inherently exploratory – notes are linked through contextual associations.<br>
They aren’t refined or complete - notes are published as half-finished thoughts that will grow and evolve over time. They’re less rigid, less performative, and less perfect than the personal websites we’re used to seeing.<br>
trans./ 翻译↓<br>
它们突破了传统认知中「个人博客」的范式约束。摒弃精心打磨的文章与时间倒序排列，这些站点呈现出渐进式非线性维基的特征。</p>
<p>数字花园本质是认知进化的集合体，其组织逻辑超越线性时间维度。</p>
<p>其认知架构具有内生探索性，通过语义网络实现知识节点的情境化联结。内容呈现认知留白，以思维半成品形态发布，预留神经可塑性发展空间。相较传统个人网站，其认知负荷更低、展示焦虑更弱、完美主义倾向更小。</p>
</blockquote>
<p>数字花园的魅力就在于它的不完美性和灵活性。在花园中应该可以让我能够在思想和创作的道路上自由探索，而不必担心最终结果是否完美。在这里，每一篇文章都可能是<strong>一个正在进行中的想法</strong>，而不是一个固定的「完成品」。它们是思维的过程，是知识的成长，而非一个已经「雕刻好的雕像」。</p>
<p>事实上，长期以来，我对博客更新的过程总是感到有些厌倦。每次我都希望能够呈现出完美的内容，但这一目标常常让我耗费大量时间，导致文章更新变得越来越拖延。我常常陷入「完美主义」的困境 —— 总觉得每篇文章应该做到无懈可击，才敢发布出去。然而我很明白完美根本不可能到来，我自身的知识水平完全不可能做到所谓的「完美」，而且文章的内容甚至会在反复修改中偏离最开始的原意。</p>
<p>昨天，我刚刚重写了一次 <a href="https://yuuu.org/post/16107.html">hello world</a>，而这篇关于数字花园的文章就是在那时萌生的想法。那一刻，我便意识到自己需要一种渐进式的写作方式。</p>
<h2 id="本地与云端的差异">本地与云端的差异</h2>
<p>在本地使用 Obsidian，虽然可以随时查看自己的笔记，但自我管理的同时也会带来惰性问题。每当我感觉能写但是又写不出来的内容，或者觉得某些笔记没有那么重要时，很容易选择放弃查看或者放弃创作。但是一旦这些内容被上传到<strong>云端</strong>并公开，情况就不同了。它们不再只是「我个人的事情」，而是公开的计划，当你知道别人也可以看到这些内容时，你自然会更加用心打理，保持内容的活跃和更新。</p>
<p>而数字花园的另一个优点是，它提供了一个相对更持续的展示。即使某些内容暂时未完善，你依然可以在平台上保持它的「生长」状态，而不必担心它会因为时效性问题而过时，<s>其实更多是因为我的遗忘而导致的过时</s>。正是这种渐进式的更新，让数字花园成为一个与时间共同发展的空间。</p>
<h2 id="向公开化迈进">向公开化迈进</h2>
<p>我决定将部分内容公开，不仅是为了让自己更有动力去更新和完善它们，也是为了让更多人能看到这片思维的花园。公开创作，是对成长的见证，也是对自己创作历程的尊重。只有真正把思考展现出来，你才能直观地看到自己的成长。</p>
<p>数字花园不完美，甚至可能还在不断变化，但是它正是我思考和创作的真实写照。随着时间的流逝，它将不断更新，逐渐成为一个丰富、充实的知识网络，而这个过程，正是我与世界交流、共同成长的途径。</p>
<p>我当然希望自己能够坚持下去，但正如那句老话所说：</p>
<blockquote>
<p>世界上最遥远的距离，是说到和做到。</p>
</blockquote>
<p>或许，我的数字花园最终能像博客一样稳定成熟，但恐怕也需要经历同样漫长的打磨与积累。</p>
<p><strong>你说我的数字花园在哪里？呐！<span class="exturl" data-url="aHR0cHM6Ly9iaXR0eS50b3Av">🥃 未竟之地<i class="fa fa-external-link-alt"></i></span></strong></p>
<h2 id="可能用到的网页">可能用到的网页</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9qb2VsaG9va3MuY29tL2RpZ2l0YWwtZ2FyZGVuLw==">My blog is a digital garden, not a blog - Joel Hooks<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9tYWdnaWVhcHBsZXRvbi5jb20vZ2FyZGVuLWhpc3Rvcnkv">A Brief History &amp; Ethos of the Digital Garden - Maggie Appleton<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly90b21jcml0Y2hsb3cuY29tL2Jsb2djaGFpbnMvZGlnaXRhbC1nYXJkZW5zLw==">Digital Gardens - Tom Critchlow<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuZWFzdGdhdGUuY29tL2dhcmRlbi9FbnRlci5odG1s">Hypertext Gardens<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
]]></content>
      <categories>
        <category>探索</category>
      </categories>
      <tags>
        <tag>探索</tag>
      </tags>
  </entry>
  <entry>
    <title>3. 拼音输入法中的 u 模式和 v 模式</title>
    <url>/post/25452.html</url>
    <content><![CDATA[<p>本文尚未彻底完工，部分段落可能存在问题。近日在平板上写作，平板上的搜狗输入法默认将 [] 转化为「」，看着很舒服，于是我便一直使用「」来代替 “” 的工作。<span id="more"></span>但是，当我开始使用电脑开始写作的时候，却发现微软拼音输入法还是说一不二帮我输出着 “”，。也就是说，在平板上，我可以用「」来代替 “” 但是在电脑上，我却又得用回 “” ，这种割裂的感觉我当然是不能接受的，我于是我开始寻找能在微软拼音输入法中快速输入「」的方法。最开始我能想到的方法是在电脑中通过加入用户自定义短语来实现快速输入「」与『』，效果如下图所示。<img data-src="https://cdn.yuuu.org/post-img/3/1.webp" alt="" loading="lazy"><br>
可以看到，其实单单是论快捷而言，这个设置已经可以满足我的需求了。</p>
<p>我原以为作为一个输入方法，这已经算是结束了。但是在了解「」的时候，知乎的一位知友给了我一个全新的回答：<strong>使用 u 模式</strong>。</p>
<h2 id="u模式是什么？">u 模式是什么？</h2>
<p>按照汉字拼音的的规律，我们在一般情况下是不需要也不会用「u」作为拼音输入法的开始，这个发音会被 「wu」所代替，正因如此，「u」将可以作为一个很好的辨别标志，用于辨别当前场景是否需要特殊输入。于是，当我们键入「u」的时候，输入法就会进入「u 模式」。<img data-src="https://cdn.yuuu.org/post-img/3/2.webp" alt="" loading="lazy"><br>
当我们键入「u」时，候选栏里面写出了关于 u 模式中可以用的特殊输入。可以看到，其中有四种输入方式。我们一个一个开始理解。</p>
<h3 id="笔画输入">笔画输入</h3>
<p>顾名思义，就是将汉字拆分为笔画，进行组装。</p>
<p>下图是键位所代表的笔画</p>
<table>
<thead>
<tr>
<th style="text-align:center">键位</th>
<th style="text-align:center">笔画</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"> h</td>
<td style="text-align:center"> 横</td>
</tr>
<tr>
<td style="text-align:center"> s</td>
<td style="text-align:center"> 竖</td>
</tr>
<tr>
<td style="text-align:center"> p</td>
<td style="text-align:center"> 撇</td>
</tr>
<tr>
<td style="text-align:center"> n</td>
<td style="text-align:center"> 捺</td>
</tr>
<tr>
<td style="text-align:center"> z</td>
<td style="text-align:center"> 折</td>
</tr>
<tr>
<td style="text-align:center"> d</td>
<td style="text-align:center"> 点</td>
</tr>
</tbody>
</table>
<p>给个例子，uhsh = 扌（横竖横），<img data-src="https://cdn.yuuu.org/post-img/3/3.webp" alt="" loading="lazy"><br>
但是我并不会用的笔画输入法，也不知道 u 模式下的符号可不可以使用通配符和分词符。笔画输入对于我来说并没有很大帮助。</p>
<h3 id="拆分输入">拆分输入</h3>
<p>一般人在遇到不会读的字的时候，往往都会偏向于读半边，这十有八九是对的🤣。而在「u 模式」中却可以用拆分输入来输入由常见字组成的不常见字，也就是可以通过拆分汉字得到部首与文字，然后将其逐个拼出合成其汉字。比如「霞」可以通过「雨」+「叚」（yu+xia）的组合进行合成，效果如下如图所示。<img data-src="https://cdn.yuuu.org/post-img/3/4.webp" alt="" loading="lazy"><br>
这种合成方式可以有效的提升我们的输入效率。比如，我正好不会上图中 2. 雫的拼音，如果需要「雫」这个字的话，只能通过搜索引擎的方式进行获取。<s>“上面一个雨下面一个下是什么字”</s>。但是在 u 模式下，可以直接使用 uyuxia 进行拼出，省去查找的时间，而且可以直接知道雫的拼音。</p>
<h3 id="笔画拆分混合输入">笔画拆分混合输入</h3>
<p>顾名思义，就是「笔画 + 拆分」，将两者的功能结合到一起，让用法更加多元，像是五笔同时兼容拼音一样，没有什么特别注意。还是给个例子<img data-src="https://cdn.yuuu.org/post-img/3/5.webp" alt="" loading="lazy"><br>
其中「pn」表示「撇捺」，可以拼出「人」。其次是拼音的「云 | yun」，加起来便是，上人下云，也就是「会」了。</p>
<h3 id="符号输入">符号输入</h3>
<p>符号输入包括了单位符号、序号符号、特殊符号、标点符号、数学符号、几何符号、字母符号，七个大类。输入方式则是，uu+（首拼）。比如单位符号 uudw、序号符号 uuxh、特殊符号 uuts、标点符号 uubd、数学符号 uusx、几何符号 uujh、字母符号 uuzm。</p>
<p>具体的都有什么符号就不一一展示了。不过，稍稍提一嘴的是，字母符号所打出来的字母是注音符号，可以和汉语拼音对应。</p>
<p>那么，我所需要的「」便是藏在了标点符号之中，输入「uubd」便可以从中找到「」与『』。</p>
<h2 id="看看另外一个键位-V">看看另外一个键位 V</h2>
<p>在微软拼音输入法中键入「v」，会显示一个和 u 模式差不多的框框。<img data-src="https://cdn.yuuu.org/post-img/3/6.webp" alt="" loading="lazy"><br>
上面写着数字、日期、时间、公式。和 u 类似，其实 v 模式也是一个特殊输入模式，大体上的功能就是，格式的转换。</p>
<h3 id="数字转换">数字转换</h3>
<p>将数字进行转换，转换为小写中文数字（一二三）、大写中文数字（壹贰叁）、罗马数字（CXXIII）、金额（大小写均有）{（一百二十三元）（壹佰贰拾叁元）}、可读的中文数字（一百二十三）。<img data-src="https://cdn.yuuu.org/post-img/3/7.webp" alt="" loading="lazy"><br>
当用上小数点的时候，便会有时间和金额两种结果。时间包括月日组合和年月组合，也区分大小写。<br>
<img data-src="https://cdn.yuuu.org/post-img/3/8.webp" alt="" loading="lazy"></p>
<h3 id="日期转换">日期转换</h3>
<p>在上文中，我输入了一个「.」用于输入小数位，这个。也可以代表日月日期或者年月日期中的分隔号。那么，当我们输入两个「.」，便可以得到年月日的组合，如下图所示。<img data-src="https://cdn.yuuu.org/post-img/3/9.webp" alt="" loading="lazy"><br>
将 20 省去，也一样可以使用。<img data-src="https://cdn.yuuu.org/post-img/3/10.webp" alt="" loading="lazy"><br>
但是在年的区域上输入五位数的时候，便不会出现日期了。<br>
<img data-src="https://cdn.yuuu.org/post-img/3/11.webp" alt="" loading="lazy"></p>
<h3 id="数学计算">数学计算</h3>
<p>计算这个方面实在是有太多的东西可以讲了，而且也包括了更复杂的函数运算，乘阶、三角函数、方差等等，甚至可以支持通过 Unicode 编码输入字符。我自认为自己对这一块认知尚少，这一部分实在是没法写出什么有价值的东西，暂时放弃。更多的可以看看搜狗这边的说明<span class="exturl" data-url="aHR0cHM6Ly9waW55aW4uc29nb3UuY29tL2hlbHAucGhwP3A9dm1vZGVsJmY9c2h1eGluZw=="> V 模式<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="最后">最后</h2>
<p>写到这里，又有谁还记得我最开始只是想去了解一下如何输入「」与『』符号呢？🤣🤣🤣</p>
]]></content>
      <categories>
        <category>探索</category>
      </categories>
      <tags>
        <tag>探索</tag>
      </tags>
  </entry>
  <entry>
    <title>4. 折腾一下自定义光标</title>
    <url>/post/8804.html</url>
    <content><![CDATA[<p>今天心血来潮，又想折腾一下博客样式，这次是对鼠标样式进行自定义修改。<span id="more"></span></p>
<h2 id="基本">基本</h2>
<p>CSS&nbsp;cursor&nbsp;属性允许我们定义鼠标指针放在一个元素边界范围内时所用的光标形状。同时，curosor 中也允许我们使用 url 来引入自定义的光标。于是，我们就可以使用 curosr 来引入 自定义光标，再用 css 将一个元素的光标定义为我们需要的自定义光标。最基本的代码就这样。</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> {</span><br><span class="line">  <span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">'custom-cursor.cur'</span>), auto;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>其中，"url (‘custom-cursor.cur’)" 表示我们引入的资源，这个资源可以是相对位置也可以是网址，后边的 auto 则表示当前者不可用的时候，使用浏览器默认的光标形状。</p>
<h2 id="解决">解决</h2>
<h3 id="网站本体">网站本体</h3>
<p>既然知道了最基本的修改手段，那么现在的问题来到了：如何用最少的光标文件来使网站光标看上去尽可能的多。我选择了三个光标，分别是:</p>
<ol>
<li class="lvl-3">
<p>default (默认光标)</p>
</li>
<li class="lvl-3">
<p>text (文本光标)</p>
</li>
<li class="lvl-3">
<p>pointer (指针光标)</p>
</li>
</ol>
<p>本站功能较少，站点的光标形态基本就是在这三个光标中来回切换，所以只需准备三个替换文件即可。所以我选择了只引入三个光标文件，用来替换默认光标。</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/* 自定义光标 */</span></span><br><span class="line"><span class="selector-tag">p</span> {</span><br><span class="line">  <span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">https://cdn.yuuu.org/cur/texto.png</span>),auto;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> {</span><br><span class="line">  <span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">https://cdn.yuuu.org/cur/normal.png</span>),auto;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> {</span><br><span class="line">  <span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">https://cdn.yuuu.org/cur/link.png</span>),auto;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>这样，网站的大部分光标都会被替换为上述光标。</p>
<h3 id="twikoo中的一些问题">twikoo 中的一些问题</h3>
<p>但是，我却发现我的 Twikoo 评论居然没有改变，还是原本的图标。我的强迫症不允许我出现这么糟心的情况，既然是修改了，当然还是希望全局生效。所以我打算将 twikoo 中的类全部加上 cursor，但是却发现 twikoo 将 css 全部以内联样式形式引入，类选择器优先级比不上内联样式，没法覆盖为我的自定义光标，无奈之下，只好加上！important 来覆盖内联样式。这不算很优雅。😔</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/* 自定义twikoo里面的，光标*/</span></span><br><span class="line"><span class="comment">/* twikoo 输入框其一 */</span></span><br><span class="line"><span class="selector-tag">input</span> {</span><br><span class="line">  <span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">https://cdn.yuuu.org/cur/texto.png</span>),auto;</span><br><span class="line">} </span><br><span class="line"><span class="comment">/* twikoo 输入框其二 */</span></span><br><span class="line"><span class="selector-tag">textarea</span> {</span><br><span class="line">  <span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">https://cdn.yuuu.org/cur/texto.png</span>),auto;</span><br><span class="line">} </span><br><span class="line"><span class="comment">/* twikoo 的一些按钮，使用了 !important，来确保生效 */</span></span><br><span class="line"><span class="selector-class">.tk-icon</span>.__comments, <span class="selector-class">.tk-submit-action-icon</span>, <span class="selector-class">.el-button</span>  {</span><br><span class="line">  <span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">https://cdn.yuuu.org/cur/normal.png</span>),auto <span class="meta">!important</span>;</span><br><span class="line">} </span><br></pre></td></tr></tbody></table></figure>
<p>至此，在 twikoo 中的元素的光标全部都被转换为了我当前自定义的光标。🎉🥳🎊</p>
<h2 id="后记">后记</h2>
<p><strong>2024/11/15 ：取消网站所有的自定义鼠标样式，突然间觉得不需要了。</strong></p>
<p>我使用了星奈铃的鼠标指针 <span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMTZmNHkxbzdBRC8=">bilibili<i class="fa fa-external-link-alt"></i></span></p>
<p>原文件为 ani 文件，目前各大浏览器内核好像都不算很支持，于是我使用了<span class="exturl" data-url="aHR0cDovL3d3dy5ydy1kZXNpZ25lci5jb20vY3Vyc29yLW1ha2Vy"> RealWorld Cursor Editor<i class="fa fa-external-link-alt"></i></span>从中抽取了一帧作为 cur 文件。但是也不知道出了什么差错，居然上传后居然没法正常的引入，在线预览变成了乱码，但是下载到本地却又正常。于是只好重新生成 png 格式上传，这才可以在线预览并且成功引入，目前暂时不知道是什么原因。按道理，一般情况是使用 cur 文件作为网站光标文件。</p>
<p>还有一些念念碎。我有一点点想用一个灰蒙蒙的圆圈来做光标，这样一定很酷。🤣</p>
<p>附上一张效果图<img data-src="https://cdn.yuuu.org/post-img/4/1.gif" alt="" loading="lazy"></p>
]]></content>
      <categories>
        <category>探索</category>
      </categories>
      <tags>
        <tag>探索</tag>
      </tags>
  </entry>
  <entry>
    <title>5.git 不区分大小写</title>
    <url>/post/19027.html</url>
    <content><![CDATA[<p>我在换光标的时候，出现了一个差错，实在是太过于憋屈，不得不写一篇文章来提醒自己。<span id="more"></span></p>
<h2 id="Git">Git</h2>
<p>在<a href="https://yuuu.org/post/8804.html">折腾一下自定义光标</a>中，我说了一下关于我如何修改网站图标的方法。在当时，我准备好了光标文件，并且上传到了 GitHub，并试图在网站中引入该文件，但是却发现无法引入。一番检查后发现，我错误的将文件命名为 Link 并且上传到了 GitHub，而我在网站中输入的 URL 中的文件名却是 link，这就导致了网址错误，没法指向文件。于是我将 Link 重命名为 link，使用 "git add ." 重新提交到 git，结果它直接提示我如下文所示。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">On branch master</span><br><span class="line">Your branch is up to date with 'origin/master'.</span><br><span class="line"></span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></tbody></table></figure>
<p>“没有可以提交的，工作树是干净的。”<br>
可是我有修改文件名耶！不管怎么改，我就是没办法让 git 识别到我改了名字，最后一气之下直接将文件删除后提交，再把重命名好的文件拉回来再提交，这样子才算是更新了 Github 上的文件。</p>
<p>把这个文件名字处理完后，我又想出了一个办法，用 <code>git mv  link.png link.png</code> 来重命名文件，在本地证实 Git 可以识别出这个文件被重命名了，然后我试着复现情况：Github 上有 Link 和其他文件，本地的 Link 文件通过 git mv 指令重命名，并且被 git 识别，同时修改部分文件。提交后，Github 却对于重命名的 link 不予理睬，只是修改了其他文件。</p>
<p>也就是说，哪怕是在本地 Git 上重命名了文件，Github 还是不会把这个文件更新。</p>
<p>我问了一番才知道，Git 可以开关区分大小写功能。具体检查代码为 <code>git config core.ignorecase</code><br>
如果该命令返回 <code>true</code>，则表示 Git 在文件名上不区分大小写。如果返回 <code>false</code> 或未设置该参数，则表示 Git 在文件名上区分大小写。而我的返回当然是 <code>true</code>，这便是祸端的开始。这件事之后，我当然希望 Git 区分大小写。不过凡事都有两面性，如果区分大小写好的话，为什么 Git 不会默认开启呢。在此之前，我还是先问了一下 New Bing，它轻飘飘的说了一段话</p>
<blockquote>
<p>Git 本身是区分大小写的，但它也可以在不区分大小写的文件系统上运行。在这种情况下，Git 有一个配置选项 <code>core.ignorecase</code>，用于告诉它是否应该忽略文件名的大小写。默认情况下，当 Git 在不区分大小写的文件系统上运行时，此选项将设置为 <code>true</code>。</p>
<p>是否区分大小写取决于您的需求和使用场景。如果您希望能够识别仅更改了文件名大小写的更改，那么您可能希望 Git 能够区分大小写。但是，在不区分大小写的文件系统上强制 Git 区分大小写可能会导致一些问题。例如，如果您仅更改了文件名的大小写，那么 Git 可能会报告虚假冲突或创建重复文件。</p>
<p>总之，如果您在不区分大小写的文件系统上使用 Git，那么最好让 Git 保持默认配置（即不区分大小写）。如果您在区分大小写的文件系统上使用 Git，则可以根据需要配置 Git 来区分或不区分大小写。</p>
</blockquote>
<p>正巧的是，windows 就是属于这一类不区分大小写的系统，按照 bing 的话，开了区分大小写的 Git 可能会导致更多的错误。既然如此，多一事不如少一事，我觉得最合适的方法还是从自身开始，减少自己的命名错误。<img data-src="https://cdn.yuuu.org/post-img/5/1.gif" alt="" loading="lazy"><br>
上图是 windows 不区分大小写的一个例子，当目录存在 "Link" 文件的时候，再重命名一个 "link" 便会报错。这个特性，我现在才知道。</p>
<h2 id="后知后觉">后知后觉</h2>
<p>写完上文我才想起，可以回滚版本来得到一个未提交 Link 的版本，这样就不用迭两个版本号来更新文件了。但是考虑到这个仓库又连带着 npm 自动部署，当我提交文件之后，便会自动开始发布 npm 包，而 npm 包无法被编辑，只可以通过递增版本的方式来进行更改，也就是，哪怕是通过回滚的方式来刷新提交记录，npm 也会上传我这一次错误的提交，不过也无所谓了，反正现在解决了。</p>
]]></content>
      <categories>
        <category>踩坑</category>
      </categories>
      <tags>
        <tag>踩坑</tag>
      </tags>
  </entry>
  <entry>
    <title>6. 简单 ubuntu 美化</title>
    <url>/post/39791.html</url>
    <content><![CDATA[<p>近段时间，我想学一下 linux，于是打算安装一个 ubuntu 来练练手。<span id="more"></span></p>
<h2 id="前言">前言</h2>
<p>近段时间，我想学一下 linux，于是打算安装一个 ubuntu 来练练手。早些时候，我安装过 linux mint，但是对 mint 的用法更像是 windows，对 linux 系统的掌握没有帮助，<s>主要是我在 windows 上的操作逻辑在 mint 都可以套用。</s></p>
<p>现在既然打算学习 linux，那也应该要试着玩玩 linux 的操作逻辑。而 mint 由于 “年纪” 较轻，好像各个地方的教程都不算丰富。或者说，ubuntu 因为发行时间长，有着更好的社区规模，我可以更好的在社区里面找到答案，所以还是 ubuntu 更适合让我学习。</p>
<h2 id="美化">美化</h2>
<p>但是我不太喜欢 ubuntu 左边的侧边栏，所以还是稍加美化一下。不过我不打算在这上面花费太多时间，所以这次美化我只是简单设置一下。</p>
<h3 id="主题">主题</h3>
<p>我们可以在<span class="exturl" data-url="aHR0cHM6Ly9wbGluZy5jb20v"> pling<i class="fa fa-external-link-alt"></i></span>中找到一些主题，我选择了<span class="exturl" data-url="aHR0cHM6Ly93d3cucGxpbmcuY29tL3AvMTQwMzMyOC8="> WhiteSur Gtk Theme<i class="fa fa-external-link-alt"></i></span>，它在<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3ZpbmNlbGl1aWNlL1doaXRlU3VyLWd0ay10aGVtZQ=="> github<i class="fa fa-external-link-alt"></i></span>上也同样有仓库，其中有写到更详细的使用方法。</p>
<p>以下是仓库中的教程操作</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/vinceliuice/WhiteSur-gtk-theme.git --depth=1</span><br><span class="line"><span class="built_in">cd</span> WhiteSur-gtk-theme</span><br><span class="line">./install.sh</span><br></pre></td></tr></tbody></table></figure>
<p>这样子，我们便可以安装好 WhiteSur-gtk-theme。至于如何启用该主题，后面会讲。</p>
<h3 id="图标和光标">图标和光标</h3>
<p>在<span class="exturl" data-url="aHR0cHM6Ly93d3cucGxpbmcuY29tL3AvMTQwMzMyOC8="> WhiteSur Gtk Theme<i class="fa fa-external-link-alt"></i></span>中，还指向了一些图标资源和光标资源，不想再费精力去挑选图标和光标可以直接去往这些链接下载。</p>
<p><a href="%5Bhttps://github.com/vinceliuice/McMojave-cursors%5D(https://github.com/vinceliuice/McMojave-cursors)">McMojave cursors</a></p>
<p>安装流程如下</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/vinceliuice/McMojave-cursors.git</span><br><span class="line"><span class="built_in">cd</span> McMojave-cursors</span><br><span class="line">./install.sh</span><br></pre></td></tr></tbody></table></figure>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3ZpbmNlbGl1aWNlL1doaXRlU3VyLWljb24tdGhlbWU=">WhiteSur icon theme<i class="fa fa-external-link-alt"></i></span></p>
<p>安装流程如下</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/vinceliuice/WhiteSur-icon-theme.git</span><br><span class="line"><span class="built_in">cd</span> WhiteSur-icon-theme</span><br><span class="line">./install</span><br></pre></td></tr></tbody></table></figure>
<p>以上三者设置全部使用最简单的安装方法，如果需要更复杂的功能或者一定程度的自定义，推荐查看项目仓库获得更好的说明</p>
<h3 id="安装-Tweaks-及其使用">安装 Tweaks &nbsp;及其使用</h3>
<blockquote>
<p>GNOME Tweak Tool（也称为 GNOME Tweaks）是一个用于定制和调整 GNOME 桌面环境的工具。它提供了一系列选项和设置，让用户可以自定义桌面外观、行为和功能。</p>
</blockquote>
<p>我们需要用这个玩意来使用之前下载的资源。</p>
<ol>
<li class="lvl-3">
<p>打开终端，执行更新命令，并且安装 Tweaks</p>
 <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update &amp;&amp; <span class="built_in">sudo</span> apt upgrade</span><br><span class="line"><span class="built_in">sudo</span> apt install gnome-tweak-tool</span><br></pre></td></tr></tbody></table></figure>
</li>
<li class="lvl-3">
<p>此时，在桌面应该已经出现名为「优化」的程序了，双击启动。或者在按下 "super" 键，输入「优化」来搜索该程序。当然，在终端输入&nbsp;gnome-tweaks 也可以启动。</p>
</li>
<li class="lvl-3">
<p>打开后，从左上角打开外观，在「主题」中设置刚才安装好的全部资源，此时美化资源即可生效。</p>
</li>
</ol>
<p><img data-src="https://cdn.yuuu.org/post-img/6/1.webp" alt="" loading="lazy"></p>
<h3 id="GNOME-Shell-Extensions">GNOME Shell Extensions</h3>
<h4 id="安装与问题">安装与问题</h4>
<p>以上功能实现，我们使用了 GNOME Shell 来对界面进行自定义。同时，GNOME Shell 中也有一项功能叫 GNOME Shell Extensions，允许我们通过安装扩展来添加额外的功能和定制选项，来满足更多的个性化需求。既然折腾到这里，不妨在上一层楼，再用 GNOME Shell Extensions 多走一步。网站→<span class="exturl" data-url="aHR0cHM6Ly9leHRlbnNpb25zLmdub21lLm9yZw==">extensions.gnome.org<i class="fa fa-external-link-alt"></i></span><br>
打开网站，会有提示，其中要求我们使用一个浏览器插件，我们点击即可。</p>
<p><img data-src="https://cdn.yuuu.org/post-img/6/2.webp" alt="" loading="lazy"></p>
<p>安装完成后，你可能还会遇到以下提示：</p>
<blockquote>
<p>你的本地主机连接器不支持下列 API：v6。或许你可以升级本地主机连接器，或者安装用于缺失 API 的插件。参考&nbsp;<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmdub21lLm9yZy9Qcm9qZWN0cy9Hbm9tZVNoZWxsSW50ZWdyYXRpb25Gb3JDaHJvbWUvSW5zdGFsbGF0aW9u">documentation<i class="fa fa-external-link-alt"></i></span>&nbsp;上的说明。</p>
</blockquote>
<p><img data-src="https://cdn.yuuu.org/post-img/6/3.webp" alt="" loading="lazy"><br>
以上信息提醒你也许是发生了一个错误。但是，以我的使用来看，这个出现提示并不影响我们的正常使用，我便是在这种情况下继续安装了诸多插件并且可以正常使用。同时，在 stackexchange 的一篇帖子的回答中，答主表示可以忽略该信息，并且继续使用 Extension manager 来安装扩展。以下为原文引用。</p>
<blockquote>
<p>This is a&nbsp;<span class="exturl" data-url="aHR0cHM6Ly9naXRsYWIuZ25vbWUub3JnL0dOT01FL2dub21lLXNoZWxsLy0vaXNzdWVzLzU2MjIjbm90ZV8xNDk3NjE1">known issue<i class="fa fa-external-link-alt"></i></span>. Despite the message, installation of extensions will still work on Ubuntu that currently has Gnome Shell 42.2 , but the website is broken on e.g. Arch systems with Gnome Shell versions containing three components, e.g., 42.3.1.<br>
So on Ubuntu, ignore the message for now. Ubuntu 22.04 users can use&nbsp;<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21qYWtlbWFuL2V4dGVuc2lvbi1tYW5hZ2Vy">Extension manager<i class="fa fa-external-link-alt"></i></span>&nbsp;to install Gnome Shell extensions - it is actually the only way to easily install extensions because the website will not work with browsers installed as snap. On older Ubuntu versions, the easier way to install the app would be to enable flatpak to install&nbsp;<span class="exturl" data-url="aHR0cHM6Ly9mbGF0aHViLm9yZy9hcHBzL2RldGFpbHMvY29tLm1hdHRqYWtlbWFuLkV4dGVuc2lvbk1hbmFnZXI=">the (official) flatpak version<i class="fa fa-external-link-alt"></i></span>.</p>
</blockquote>
<h4 id="插件的安装">插件的安装</h4>
<p>而 GNOME Shell Extensions 的安装流程十分简单，在列表中选择需要的插件，同时打开网页后将右侧的按钮点为 on。接下来，在弹出的窗口中选取「安装」即可。</p>
<p><img data-src="https://cdn.yuuu.org/post-img/6/4.webp" alt="" loading="lazy"></p>
<p><img data-src="https://cdn.yuuu.org/post-img/6/5.webp" alt="" loading="lazy"><br>
基本的安装就是这样了，接下来就是挑选插件的时候了。在这里，我给出我的插件列表，更多的玩法还是自己在列表中寻找吧。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9leHRlbnNpb25zLmdub21lLm9yZy9leHRlbnNpb24vMzE5My9ibHVyLW15LXNoZWxsLw==">Blur my Shell<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9leHRlbnNpb25zLmdub21lLm9yZy9leHRlbnNpb24vNzc5L2NsaXBib2FyZC1pbmRpY2F0b3Iv">Clipboard Indicator<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9leHRlbnNpb25zLmdub21lLm9yZy9leHRlbnNpb24vMzA3L2Rhc2gtdG8tZG9jay8=">Dash to Dock<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9leHRlbnNpb25zLmdub21lLm9yZy9leHRlbnNpb24vNzUwL29wZW53ZWF0aGVyLw==">OpenWeather<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9leHRlbnNpb25zLmdub21lLm9yZy9leHRlbnNpb24vNDQ3OC9uZXQtc3BlZWQv">Net Speed<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<h3 id="后记">后记</h3>
<p>以上，就是美化的尽头了。</p>
<p>附对比图两张。单单从桌面看两者没什么太大的差别，不过窗口富有果味，很符合我对 Ubuntu 高度自由的想象😀。同时配合 ubuntu 的动画，整体体验确实给我这个从来没有玩过 linux 的人带来了耳目一新的感觉。<br>
<img data-src="https://cdn.yuuu.org/post-img/6/6.webp" alt="" loading="lazy"></p>
<p><img data-src="https://cdn.yuuu.org/post-img/6/7.webp" alt="" loading="lazy"></p>
<h4 id="引用来源">引用来源</h4>
<ol>
<li class="lvl-3">
<p><span class="exturl" data-url="aHR0cHM6Ly9hc2t1YnVudHUuY29tL3F1ZXN0aW9ucy8xNDE4OTM3Lw==">Your native host connector do not support following APIs: v6<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ol>
]]></content>
      <categories>
        <category>折腾</category>
      </categories>
  </entry>
  <entry>
    <title>7.ubuntu 显卡安装小记</title>
    <url>/post/54849.html</url>
    <content><![CDATA[<p>近日想在 ubuntu 上录一个屏，于是我安装了 obs，但是打开后才发现屏幕捕捉只是黑屏一片，只有一个鼠标可以显示。上网搜索一番在知道，大概是 ubuntu 的自带的显卡驱动 nouveau 的问题。所以最好的解决方法大概就是安装英伟达显卡的驱动。<span id="more"></span>以我在 windows 上的操作逻辑，当然是直接在可视化界面中的「软件与更新」里面寻找显卡驱动，然后直接更新，可这就是悲剧的开始。在 ubuntu 中的「软件和更新」中选择了图中的「NVIDIA Server Driver metapackage 来自 nvidia-driver-535-server (专有)」进行更新。安装完成后，它要求重启来完成安装。可当重启后，却是只显示几行代码。我不懂’SGX’和’ucsi-ccg’是什么意思，但是看到 nvidia-gpu 和 error 的时候，我大概明白，应该是安装出的问题：英伟达显卡超时错误。<img data-src="https://cdn.yuuu.org/post-img/7/1.webp" alt="" loading="lazy"><br>
我尝试着用 alt + ctrl + f1 进入 tty1 虚拟控制台，但是毫无反应，重复用 alt + ctrl + f1/2/3/4/5/6 来试图进入 tty1/2/3/4/5/6，偶有几次成功，但是却会在数秒后无征兆退回最初的错误页面。几番尝试全都无果告终，重启好几次都只是卡在以上的界面。网络上的解决教程几乎都是围绕着进入命令行开始修复的，却没有像我这般卡死在「外边」的。但是，我手里留有一个安装 ubuntu 的 u 盘。里面还有 ubuntu 的镜像。通过可以 live usb 中 try ubuntu 可以试用其中的 ubuntu 系统，虽然应该是一个最小安装的系统，但是也不妨碍我们用它来救救火。</p>
<h2 id="修复驱动">修复驱动</h2>
<p>插入 u 盘，选择该 u 盘并启动其中的 ubuntu 镜像。在最开始的页面中选择「试用 ubuntu」进入 ubuntu 系统。</p>
<p>接下来，打开终端，开始挂载安装本机中安装了 ubuntu 的硬盘。在此之前，先确定安装 ubuntu 的盘在哪个物理磁盘上。用 <code>parted</code> 指令或者 <code>fdisk</code> 均可。我电脑有两块 128GB 的 SSD 硬盘，有点容易搞混，parted 可以显示硬盘名字，增加区分度。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> fdisk -l</span><br><span class="line"><span class="comment"># 如果用fdisk还是不知道在哪个盘试试下面这个parted</span></span><br><span class="line"><span class="built_in">sudo</span> parted -l</span><br></pre></td></tr></tbody></table></figure>
<p><img data-src="https://cdn.yuuu.org/post-img/7/2.webp" alt="" loading="lazy"><br>
如图所示，这里这里有两个盘，文件系统为 <code>ntfs</code> 的是 windows 系统所在的盘，<code>ext4</code> 则是 ubuntu 系统所在的盘。我所要挂载的盘是 /dev/sdb，各位要根据实际进行修改。</p>
<h3 id="挂载硬盘和启用必要的虚拟文件系统">挂载硬盘和启用必要的虚拟文件系统</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 将硬盘上的 Ubuntu 根分区挂载到 `/mnt` 目录，访问和操作其中的文件和目录</span></span><br><span class="line"><span class="built_in">sudo</span> mount /dev/sdb /mnt </span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 在 chroot 环境中访问和使用系统中的设备文件。</span></span><br><span class="line"><span class="built_in">sudo</span> mount --<span class="built_in">bind</span> /dev /mnt/dev </span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 chroot 环境中使用终端功能。</span></span><br><span class="line"><span class="built_in">sudo</span> mount --<span class="built_in">bind</span> /dev/pts /mnt/dev/pts </span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 chroot 环境中访问和操作系统内核和进程的相关信息。</span></span><br><span class="line"><span class="built_in">sudo</span> mount --<span class="built_in">bind</span> /proc /mnt/proc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 chroot 环境中访问和操作系统硬件和设备的相关信息。</span></span><br><span class="line"><span class="built_in">sudo</span> mount --<span class="built_in">bind</span> /sys /mnt/sys</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 切换当前的根目录到 `/mnt`,</span></span><br><span class="line"><span class="comment"># 通过使用 chroot，我们可以在一个隔离的环境中运行命令，让其以为这个环境是真正的根目录，</span></span><br><span class="line"><span class="comment"># 从而可以进行系统操作、安装软件。</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chroot</span> /mnt </span><br></pre></td></tr></tbody></table></figure>
<p>综合起来，这些命令的逻辑是将硬盘上的 Ubuntu 根分区挂载到 <code>/mnt</code>，然后通过绑定虚拟文件系统和使用 chroot，创建一个隔离的环境，以便在其中操作和管理您的 Ubuntu 系统。这样做可以方便地进行修复、配置或管理系统，而不会影响到主机系统。</p>
<h3 id="进入chroot进行修复">进入 chroot 进行修复</h3>
<p>进到 chroot 环境中就可以正式开始修复了。先卸载可能已经安装了的 NVIDIA 驱动。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get purge nvidia-*  <span class="comment"># 删除所有 NVIDIA 显卡驱动程序及其相关的软件包</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get autoremove  <span class="comment"># 移除系统上已经不再需要的软件包</span></span><br></pre></td></tr></tbody></table></figure>
<p>然后安装回默认的 Nouveau 驱动</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install xserver-xorg-video-nouveau</span><br></pre></td></tr></tbody></table></figure>
<p>我的电脑无法正常进入系统，也无法进入 tty 模式，可能在系统引导出了问题，这里我更新一下 grub，预防万一。正常情况下应该是不需要执行的。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">update-grub</span><br></pre></td></tr></tbody></table></figure>
<p>在 chroot 环境中完成修复后，退出 chroot</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="卸载虚拟文件系统">卸载虚拟文件系统</h3>
<p>退出 chroot 后，卸载之前挂载的虚拟文件系统：相反的顺序卸载虚拟文件系统，以确保没有依赖关系。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> umount /mnt/sys</span><br><span class="line"><span class="built_in">sudo</span> umount /mnt/proc</span><br><span class="line"><span class="built_in">sudo</span> umount /mnt/dev/pts</span><br><span class="line"><span class="built_in">sudo</span> umount /mnt/dev</span><br></pre></td></tr></tbody></table></figure>
<p>最后，卸载硬盘分区。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> umount /mnt</span><br></pre></td></tr></tbody></table></figure>
<p>现在就可以关闭系统，卸载 u 盘，然后重启了。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> rebot</span><br></pre></td></tr></tbody></table></figure>
<p>重启后看到了久违的系统桌面，总算是救援成功。🥳</p>
<h2 id="安装英伟达显卡驱动">安装英伟达显卡驱动</h2>
<p>虽然电脑是救回来了，但我还是想安装显卡驱动，这个该怎么做？既然系统内自带的 “软件和更新” 程序没法正常更新，我打算手动安装驱动。</p>
<h3 id="下载驱动和附加组件">下载驱动和附加组件</h3>
<p>在<span class="exturl" data-url="aHR0cHM6Ly93d3cubnZpZGlhLmNuL0Rvd25sb2FkL2luZGV4LmFzcHg/bGFuZz1jbg==">官方驱动 | NVIDIA<i class="fa fa-external-link-alt"></i></span>可以通过条件选取选择到适合自己的驱动。不知道显卡驱动的话，可以用以下指令查看。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">lspci | grep -i vga </span><br></pre></td></tr></tbody></table></figure>
<p>通过下载我们会得到一个.run 的文件。这个文件先放好，一会用上。</p>
<h3 id="安装组件和清理驱动">安装组件和清理驱动</h3>
<p>现在我们安装一些必备 / 可选的驱动，考虑到各种问题，我还是把一些大概用不上但是可能用的上的组件给加上了。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get update   <span class="comment"># 更新软件列表</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt-get install g++ <span class="comment"># 安装gcc套件</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt-get install gcc  <span class="comment"># 安装gcc套件</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt-get install make  <span class="comment"># 安装make</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt install linux-headers-$(<span class="built_in">uname</span> -r) <span class="comment"># 安装内核头文件 (可选)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt install xorg <span class="comment"># 安装 X Window System(可选)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt install libgl1-mesa-dev <span class="comment"># 安装 OpenGL 库和开发工具(可选)</span></span><br></pre></td></tr></tbody></table></figure>
<p>卸载所有英伟达显卡驱动，为了避免之前安装的驱动对我们造成影响。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get remove --purge nvidia*</span><br></pre></td></tr></tbody></table></figure>
<h3 id="禁用nouveau">禁用 nouveau</h3>
<p>接下来禁用 nouveau，在 blacklist 中禁用。</p>
<blockquote>
<p><code>/etc/modprobe.d/blacklist.conf</code> 是一个配置文件，用于在 Linux 系统中禁用或屏蔽特定的内核模块（驱动程序）加载。在 Linux 系统中，内核模块是用于支持硬件设备、文件系统或其他核心功能的一种动态加载的软件组件。<code>/etc/modprobe.d/blacklist.conf</code> 文件允许您指定要禁用的内核模块，以防止其加载。当您在 <code>/etc/modprobe.d/blacklist.conf</code> 文件中添加一个模块的条目时，系统会在启动时检查该文件，并在加载内核模块时跳过指定的模块。这对于解决某些硬件或软件相关的问题非常有用，例如禁用冲突的驱动程序或不需要的功能模块。在该文件中，每个禁用的内核模块条目通常以 <code>blacklist</code> 关键字开头，后跟要禁用的模块的名称。</p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 打开并编辑blacklist.conf</span></span><br><span class="line"><span class="built_in">sudo</span> gedit /etc/modprobe.d/blacklist.conf</span><br></pre></td></tr></tbody></table></figure>
<p>加入以下两行，禁用 Nouveau 驱动程序</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 禁用 Nouveau 驱动程序，阻止 Nouveau 驱动程序在系统启动时加载</span></span><br><span class="line">blacklist nouveau</span><br><span class="line"><span class="comment"># 禁用 Nouveau 驱动程序的内核模式设置</span></span><br><span class="line">options nouveau modeset=0</span><br></pre></td></tr></tbody></table></figure>
<p>最后更新一下 initramfs，主要还是担心之前的引导问题。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> update-initramfs –u  <span class="comment"># -u参数表示 "update"</span></span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>在 Linux 系统启动时，initramfs 是一个非常小的文件系统，它包含了一些基本的工具、驱动程序和文件，用于在正式的根文件系统被挂载之前进行初始化和准备工作。它的主要目的是为了确保系统能够正确地启动并加载所需的驱动程序和文件系统。<br>
initramfs 中包含了用于加载真正的根文件系统所需的驱动程序、模块、配置文件和其他必要的工具。它允许系统在启动过程中进行硬件检测、初始化设备、加载必要的驱动程序和模块，以及解决其他启动过程中可能遇到的问题。一旦 initramfs 完成了启动过程中的初始化和准备工作，它会将控制权转交给真正的根文件系统，然后真正的根文件系统会被挂载到系统上，从而完成整个启动过程。</p>
</blockquote>
<p>重启后看看是否可以进入系统，此时进入「软件与更新」，则会提示说我们在使用备用驱动。<br>
<img data-src="https://cdn.yuuu.org/post-img/7/3.webp" alt="" loading="lazy"></p>
<h3 id="开始安装驱动">开始安装驱动</h3>
<p>接下来就是进入命令行了。可以使用 <code>sudo telinit 3</code> 和 <code>init 3</code> 在 Linux 系统中切换运行级别（也称为运行模式）， 他们的效果是一样的。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> init 3</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"><span class="built_in">sudo</span> telinit 3</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p><strong>补课 ^ 啥是运行级别</strong><br>
在 Linux 中，运行级别是指操作系统处于不同状态下的配置集合。不同的运行级别可以定义不同的服务和功能。以下是一些常见的运行级别：<br>
0 - 关机状态：系统已经关闭或将要关闭。<br>
1 - 单用户模式：只有一个用户（通常是 root）可以登录，用于系统维护和修复。<br>
2 - 多用户模式，没有网络：多用户模式，但没有网络连接。<br>
3 - 多用户模式，有网络：多用户模式，并且启动了网络服务。<br>
4 - 保留模式：未分配特定用途，可以根据需要进行自定义配置。<br>
5 - 图形用户界面模式：启动图形用户界面（如 X Window System）。<br>
6 - 重启状态：用于重新启动系统。</p>
</blockquote>
<p>对了，在运行前先看看 nouveau 还运不运行，不输出就是不运行了。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">lsmod | grep nouveau </span><br></pre></td></tr></tbody></table></figure>
<p>接下来就很简单了，cd 到下载了驱动的目录，先增加可执行权限，然后运行。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 给你下载的驱动赋予可执行权限，才可以安装</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> 777 NVIDIA-Linux-x86_64-430.26.run   </span><br><span class="line"><span class="comment"># 安装 (前面已经安装了openGL，加后缀不安装opengl)</span></span><br><span class="line"><span class="built_in">sudo</span> ./NVIDIA-Linux-x86_64-535.86.05.run （–no-opengl-files）   </span><br></pre></td></tr></tbody></table></figure>
<p>现在，页面大概会变成蓝底白字选项为红色。接下来按照页面的引导继续完成安装即可。而在命令行安装 NVIDIA 显卡驱动时，通常会有一些选项需要你选择。以下是常见的一些选项及其含义：<br>
<strong>这些选项可能随时间而变化</strong></p>
<ol>
<li class="lvl-3">
<p><strong>Install NVIDIA’s 32-bit compatibility libraries? (YES/NO):</strong></p>
<ul class="lvl-2">
<li class="lvl-6">如果你计划运行 32 位的应用程序或库，或者有其他依赖于 32 位库的需求，可以选择 YES。</li>
<li class="lvl-6">如果不需要支持 32 位应用程序或库，可以选择 NO。</li>
</ul>
</li>
<li class="lvl-3">
<p><strong>Do you want to run the nvidia-xconfig utility to automatically update your X configuration file so that the NVIDIA X driver will be used when you restart X? (YES/NO):</strong></p>
<ul class="lvl-2">
<li class="lvl-6">如果你希望自动更新 X 配置文件，以便在重新启动 X 时使用 NVIDIA 驱动，可以选择 YES。</li>
<li class="lvl-6">如果你希望手动配置 X 驱动，或者不确定是否需要此功能，可以选择 NO。</li>
</ul>
</li>
<li class="lvl-3">
<p><strong>Would you like to run the nvidia-persistenced daemon? (YES/NO):</strong></p>
<ul class="lvl-2">
<li class="lvl-6"><code>nvidia-persistenced</code> 守护程序可以在系统启动时自动加载 NVIDIA 驱动并处理 GPU 的持久性状态。如果你希望启用此功能，可以选择 YES。</li>
<li class="lvl-6">如果不需要此功能，可以选择 NO。</li>
</ul>
</li>
<li class="lvl-3">
<p><strong>Would you like to enable support for OpenGL rendering? (YES/NO):</strong></p>
<ul class="lvl-2">
<li class="lvl-6">如果你需要支持 OpenGL 渲染，可以选择 YES。</li>
<li class="lvl-6">如果不需要 OpenGL 渲染支持，可以选择 NO。</li>
</ul>
</li>
<li class="lvl-3">
<p><strong>Would you like to run the <span class="exturl" data-url="aHR0cDovL252aWRpYS1idWctcmVwb3J0LnNo">nvidia-bug-report.sh<i class="fa fa-external-link-alt"></i></span> script to collect data about your system to assist NVIDIA in providing a better driver? (YES/NO):</strong></p>
<ul class="lvl-2">
<li class="lvl-6">如果你愿意为 NVIDIA 提供更好的驱动支持，可以选择 YES，这将帮助他们收集系统信息以进行问题排查和优化。</li>
<li class="lvl-6">如果不希望提供数据，可以选择 NO。</li>
</ul>
</li>
</ol>
<p>选择好需要的选项后，正常情况下安装应该是成功了，接下来就是重启了。我是 gdm3 显示管理器，所以用以下指令重启显示管理器，然后再用 <code>sudo init 5</code> 回到图形化界面，如果还不行就重启计算机。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> service gdm3 restart <span class="comment">#重启gdm3</span></span><br><span class="line"><span class="built_in">sudo</span> init 5 <span class="comment">#切换回图形界面</span></span><br><span class="line"><span class="built_in">sudo</span> reboot <span class="comment">#重启</span></span><br></pre></td></tr></tbody></table></figure>
<p>输入 <code>nvidia-smi</code> 和 <code>nvidia-settings</code> 可以出现以下画面即为成功。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">nvidia-smi </span><br><span class="line">nvidia-settings </span><br></pre></td></tr></tbody></table></figure>
<p><img data-src="https://cdn.yuuu.org/post-img/7/4.webp" alt="" loading="lazy"></p>
<p><img data-src="https://cdn.yuuu.org/post-img/7/5.webp" alt="" loading="lazy"></p>
<p>至此，安装终于结束，电脑也用上了英伟达显卡。太不容易了。然而，在要不是不可以在「软件与更新」里面直接安装，我又为何要绕这么多弯路来这么安装呢？😶‍🌫️</p>
<h2 id="后记">后记</h2>
<h3 id="可能遇到的错误">可能遇到的错误</h3>
<ol>
<li class="lvl-3">
<p>缺少 GNU 编译器套装。安装 <code>gcc</code> 和 <code>g++</code>，可以试着重复安装。<br>
<strong>关键字：cc、gcc</strong></p>
</li>
<li class="lvl-3">
<p>Nouveau 影响英伟达驱动安装。它们两个在同一系统会冲突，禁用 Nouveau 驱动即可。<br>
<strong>关键字：Nouveau、driver</strong></p>
</li>
<li class="lvl-3">
<p>缺少 make 工具。安装 <code>make</code> 即可，可以试着重复安装。<br>
<strong>关键字：make、tool</strong></p>
</li>
</ol>
<h3 id="遭遇">遭遇</h3>
<p>本人将这块硬盘装在了 amd 显卡的电脑上，虽然能启动，但是一直在黑屏，无奈之下只好重装了系统。至此，再也不用烦恼英伟达的显卡驱动问题了。</p>
<h3 id="参考链接">参考链接</h3>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzQ4NTMwNzAxMC9hbnN3ZXIvMzAxNjc2MzAwOQ==">如何安装 NVIDIA 显卡驱动？<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BlcmZlY3Q4ODYvYXJ0aWNsZS9kZXRhaWxzLzExOTEwOTM4MA==">Ubuntu18-22.04 安装和干净卸载 nvidia 显卡驱动 —— 超详细、最简单<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xMTU3NTg4ODI=">NVIDIA 驱动安装 - 从问题到解决 (Linux/Ubuntu)<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>折腾</category>
      </categories>
      <tags>
        <tag>折腾</tag>
      </tags>
  </entry>
  <entry>
    <title>8. 购入产品记录</title>
    <url>/post/47.html</url>
    <content><![CDATA[<p>近几年都没买过东西，家中各类产品也到了更新迭代的时候了，现在购入了很多物品，分享一下自己买的东西。<span id="more"></span>图文结构冲突警告–「图大字小」，拍照技术低下警告。理论上持续更新。</p>
<h2 id="手机">手机</h2>
<p>手机选择的是 redme k60 pro ，线下店提货。其实在 k60 这个价位有挺多竞品的，诸如 realme GT Neo5 、一加 ACE 2 、荣耀 80 GT。最后选择小米的原因只是因为有更好的刷机环境。总之，在能折腾的时候折腾折腾吧。（618 买后，这红米 k60 pro 居然还在跳水，自己又亏了百来元）<br>
<img data-src="https://cdn.yuuu.org/post-img/8/1.webp" alt="" loading="lazy"></p>
<h2 id="平板">平板</h2>
<p>因为买了小米手机，于是也顺便买了一台小米平板 6 pro。选择这块屏幕纯粹是为了平时的娱乐。目前是用来看番，体验还不错。</p>
<p>我还顺便买了一支小米的触控笔，还打算用来学一下画画。可惜安卓生态没有像 procreate 这般能打的画图软件，加上自己也懒得学，画画这事就一直拖延下来。</p>
<p>不过，这个平板给我的体验还是很惊艳的，四扬声器所表达的声效让这个听了十余年的单扬声器的土包震惊了好久，一直没有摸过大屏电子产品孩子觉得这个平板用料过得去。</p>
<p>买完之后发现隔壁红米平板 800 元也有四扬声器和杜比音效，顿时有点愣住😶。所以小米平板只是贵在了芯片上，对吗？<br>
<img data-src="https://cdn.yuuu.org/post-img/8/2.webp" alt="" loading="lazy"></p>
<h2 id="耳机">耳机</h2>
<h3 id="气传导">气传导</h3>
<p>我曾在早年间购入过 小米的 Air2 SE，音质是过得去的没问题，只是耳柄太长，外观不好看，自己早已嫌弃，加之又很好奇现在所谓的主动降噪到底有多厉害，于是趁着六一八购入了 lollipop 2 pro 。lollipop 2 pro 的降噪确实是有效的，降噪与耳机内的音乐配合，完全可以在广场之类的大人流、吵闹地带中享受音乐。但是缺点恐怕就是在降噪模式下，耳朵好像被耳机充了高压，有一点点难受，几天之后就无感了。习惯后便感觉普通的耳机就像是漏音一样，外界的音「漏」进来，耳机的音「漏」出去。</p>
<p><s>忽略全是污点的盒子，我也不知道为什么这么多黑点。</s><br>
<img data-src="https://cdn.yuuu.org/post-img/8/3.webp" alt="" loading="lazy"></p>
<h3 id="骨传导">骨传导</h3>
<p>最近一段时间骨传导耳机总是被人提及，也不知道是不是我搜索了相关关键词后平台的推送，还是这一块的热度在上升。总之，我购入了南卡的 cc 3，全称应该是 nank-runner cc 3，买的是有着 4g 内存的内存版。骨传导耳机佩戴在耳朵靠面部的那块区域，靠着与皮肤紧贴进行传声。但是南卡这一副耳机没有传闻中骨传导的对骨头有高压感，带上去反而是十分的舒适，但是败也此处，在跑步过程中会略有松动，跑步的晃动会让它没法紧贴脸部，导致音乐体验有点下降。</p>
<p>还有要吐槽的就是，与这副耳机的 mp3 模式相比，蓝牙模式下的音乐简直没法听，蓝牙模式下的音乐堪比拼多多上的 10 元出头的蓝牙耳机，高低音丢失，伴随有很强的气流声，总之与 mp3 模式形成了强烈反差。</p>
<p>更有趣的是，我只是低强度使用了两周，nank-runner cc 3 的 mp3 模式便直接损坏，不管是按切换按钮还是连接电脑查看都没办法使用 mp3 模式的功能。我和客服说明后寄回维修，最后他们发了一个新货过来，这次的 nank-runner cc 3 各方面的体验都得到提升了，蓝牙模式总算不像是拼多多耳机了，而 mp3 模式下的音质也总算是对得起那些无损音乐文件了。</p>
<p>我对于 nank-runner cc 3 的整体体验不算好，对他们家的品控和质量都有所怀疑。<br>
<img data-src="https://cdn.yuuu.org/post-img/8/4.webp" alt="" loading="lazy"><br>
<img data-src="https://cdn.yuuu.org/post-img/8/5.webp" alt="" loading="lazy"></p>
<h2 id="运动手表">运动手表</h2>
<p>平时运动不喜欢带手机出去，但是又想听歌，无奈之下只好从佩戴无感的手表入手。正好了解到华为的 fit 2 有着我想要的一切功能，24g 的存储空间，gps 定位，支持连接蓝牙耳机甚至是外放，而且屏幕比华为手环大了一圈。可以说，这块表刚好满足到我目前的刚需。考虑这块表是 2022 年 7 月 4 日上市的，距离现在比较久，价格也较首发价更低，确实是一款不错的表。</p>
<p>但是我在六月份购入的骨传导耳机却自带内存，这个播放音乐的功能就很鸡肋了，哎，又是没料到的情况呢。<br>
<img data-src="https://cdn.yuuu.org/post-img/8/6.webp" alt="" loading="lazy"></p>
<h2 id="键盘">键盘</h2>
<p>以前一直在按薄膜键盘，早就想试试机械键盘的魅力，于是选择了 75％布局的键盘，金粉轴 ——kzzi k75。机械键盘的手感与薄膜键盘的感觉是真的不一样，更有力量感和回弹反馈，还有最关键的声音反馈 <s>“突突突突突”</s>。当用习惯机械键盘后，总感觉薄膜键盘的手感就像面条般无力，不过如此。目前这把键盘的蓝牙模式连接平板，无线模式连接电脑，刚好可以完成分工，可以说是我目前最满意的一件购入品了。<br>
<img data-src="https://cdn.yuuu.org/post-img/8/7.webp" alt="" loading="lazy"><br>
<img data-src="https://cdn.yuuu.org/post-img/8/8.webp" alt="" loading="lazy"></p>
]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>9. 使用 gulp 对资源进行压缩</title>
    <url>/post/4800.html</url>
    <content><![CDATA[<p><strong>2024/10/25：gulp 已经更新了 5.0，我所使用的配置文件中所用的 gulp-fontmin 是过时的插件，除非安装 gulp4，不然以下配置文件可能会出现不可预料的错误。</strong></p>
<p>在 Web 前端开发工作中有很多 “重复工作”，比如压缩 CSS/JS 文件。而这些工作都是有规律的。找到这些规律，并编写 gulp 配置代码，让 gulp 自动执行这些 “重复工作”。-- form gulp-book!</p>
<h2 id="什么是gulp">什么是 gulp</h2>
<p>Gulp 是一个流行的自动化构建工具，用于简化这些重复性的任务。Gulp 的核心思想是利用代码来自动化处理开发过程中的繁琐任务，从而提高开发效率和代码质量。正如官网上所说:<br>
“A toolkit to automate &amp; enhance your workflow”<br>
“Leverage gulp and the flexibility of JavaScript to automate slow, repetitive workflows and compose them into efficient build pipelines.”</p>
<p>而 Gulp 的强大之处在于它的插件生态系统。插件是用于处理特定任务的 JavaScript 模块。我们可以安装部分插件来使我们完成对博客静态资源的压缩。</p>
<h2 id="安装gulp">安装 gulp</h2>
<p>gulp 是基于 node.js 开发的，我们需要先安装 node.js 和 npm，npm 会在安装完 node.js 后自动安装。安装完成后看看是否安装成功。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 检查安装</span></span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></tbody></table></figure>
<p>我使用 hexo 来建站，hexo 本身需要依托 node.js，所以使用 hexo 的朋友可以跳过安装 node.js 这一步。</p>
<p>安装 Gulp 的命令行工具，这样可以使我们在命令行中使用 gulp。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm install -g gulp-cli</span><br><span class="line"><span class="comment"># 检查版本</span></span><br><span class="line">gulp -v</span><br></pre></td></tr></tbody></table></figure>
<h2 id="安装插件">安装插件</h2>
<p>gulp 拥有着丰富的插件支持，其中就有我们所需要的压缩网页的插件。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 gulp </span></span><br><span class="line">npm install gulp --save-dev</span><br><span class="line"><span class="comment"># 删除无用文件</span></span><br><span class="line">npm install gulp-clean --save-dev</span><br><span class="line"><span class="comment"># 压缩和优化 CSS </span></span><br><span class="line">npm install gulp-clean-css --save-dev</span><br><span class="line"><span class="comment"># 压缩字体文件</span></span><br><span class="line">npm install gulp-fontmin --save-dev</span><br><span class="line"><span class="comment"># 压缩和优化 HTML 文件</span></span><br><span class="line">npm install gulp-html-minifier-terser --save-dev</span><br><span class="line"><span class="comment"># 清理和格式化 HTML 文件</span></span><br><span class="line">npm install gulp-htmlclean --save-dev</span><br><span class="line"><span class="comment"># 压缩和混淆 JavaScript 文件</span></span><br><span class="line">npm install gulp-terser --save-dev</span><br><span class="line"><span class="comment"># 用于将 TrueType 字体文件 (.ttf) 转换为 WOFF2 格式</span></span><br><span class="line">npm install gulp-ttf2woff2 --save-dev</span><br></pre></td></tr></tbody></table></figure>
<h2 id="使用">使用</h2>
<p>安装完成后，在博客根目录新建 <code>gulpfile.js</code>，并且输入以下内容</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 引入所需的插件</span></span><br><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">const</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-html-minifier-terser'</span>);</span><br><span class="line"><span class="keyword">const</span> htmlclean = <span class="built_in">require</span>(<span class="string">'gulp-htmlclean'</span>);</span><br><span class="line"><span class="keyword">const</span> cleanCSS = <span class="built_in">require</span>(<span class="string">'gulp-clean-css'</span>);</span><br><span class="line"><span class="keyword">const</span> terser = <span class="built_in">require</span>(<span class="string">'gulp-terser'</span>);</span><br><span class="line"><span class="keyword">const</span> fontmin = <span class="built_in">require</span>(<span class="string">'gulp-fontmin'</span>);</span><br><span class="line"><span class="keyword">const</span> ttf2woff2 = <span class="built_in">require</span>(<span class="string">'gulp-ttf2woff2'</span>);</span><br><span class="line"><span class="keyword">const</span> clean = <span class="built_in">require</span>(<span class="string">'gulp-clean'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩和清理 HTML</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">'minify-html'</span>, <span class="function">() =&gt;</span> {</span><br><span class="line">  <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">'./public/**/*.html'</span>)<span class="comment">// 看情况修改</span></span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">htmlclean</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">htmlmin</span>({ </span><br><span class="line">      <span class="attr">collapseWhitespace</span>: <span class="literal">true</span> ,</span><br><span class="line">      <span class="attr">removeComments</span>: <span class="literal">true</span>, <span class="comment">//清除html注释</span></span><br><span class="line">      <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>, <span class="comment">//折叠文档树中构成文本节点的空白区域</span></span><br><span class="line">      <span class="attr">collapseBooleanAttributes</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">//省略布尔属性的值，例如：&lt;input checked="true"/&gt; ==&gt; &lt;input /&gt;</span></span><br><span class="line">      <span class="attr">removeEmptyAttributes</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">//删除所有空格作属性值，例如：&lt;input id="" /&gt; ==&gt; &lt;input /&gt;</span></span><br><span class="line">      <span class="attr">removeScriptTypeAttributes</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">//删除&lt;script&gt;的type="text/javascript"</span></span><br><span class="line">      <span class="attr">removeStyleLinkTypeAttributes</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">//删除&lt;style&gt;和&lt;link&gt;的 type="text/css"</span></span><br><span class="line">      <span class="attr">removeAttributeQuotes</span>: <span class="literal">true</span>, <span class="comment">// 移除属性值周围的引号</span></span><br><span class="line">      <span class="attr">removeCDATASectionsFromCDATA</span>: <span class="literal">true</span>, <span class="comment">// 从 CDATA 部分移除注释</span></span><br><span class="line">      <span class="attr">caseSensitive</span>: <span class="literal">true</span>,        <span class="comment">// 以区分大小写的方式处理属性</span></span><br><span class="line">      <span class="attr">minifyJS</span>: <span class="literal">true</span>, <span class="comment">//压缩页面 JS</span></span><br><span class="line">      <span class="attr">minifyCSS</span>: <span class="literal">true</span>, <span class="comment">//压缩页面 CSS</span></span><br><span class="line">      <span class="attr">minifyURLs</span>: <span class="literal">true</span> , <span class="comment">//压缩页面URL</span></span><br><span class="line">    }))</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">'./public'</span>))<span class="comment">// 看情况修改</span></span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 CSS</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">'minify-css'</span>, <span class="function">() =&gt;</span> {</span><br><span class="line">  <span class="keyword">return</span> gulp.<span class="title function_">src</span>([<span class="string">'./public/**/*.css'</span>])<span class="comment">// 看情况修改</span></span><br><span class="line">  .<span class="title function_">pipe</span>(<span class="title function_">cleanCSS</span>({</span><br><span class="line">    <span class="attr">level</span>: {</span><br><span class="line">      <span class="number">2</span>: {</span><br><span class="line">        <span class="attr">mergeAdjacentRules</span>: <span class="literal">true</span>, </span><br><span class="line">        <span class="comment">// 控制相邻规则的合并，默认为 true</span></span><br><span class="line">        <span class="attr">mergeIntoShorthands</span>: <span class="literal">true</span>, </span><br><span class="line">        <span class="comment">// 控制属性合并为简写形式，默认为 true</span></span><br><span class="line">        <span class="attr">mergeMedia</span>: <span class="literal">true</span>, </span><br><span class="line">        <span class="comment">// 控制 @media 规则的合并，默认为 true</span></span><br><span class="line">        <span class="attr">mergeNonAdjacentRules</span>: <span class="literal">true</span>, </span><br><span class="line">        <span class="comment">// 控制非相邻规则的合并，默认为 true</span></span><br><span class="line">        <span class="attr">mergeSemantically</span>: <span class="literal">false</span>,</span><br><span class="line">         <span class="comment">// 控制语义合并，默认为 false</span></span><br><span class="line">        <span class="attr">overrideProperties</span>: <span class="literal">true</span>, </span><br><span class="line">        <span class="comment">// 基于可读性控制属性覆盖，默认为 true</span></span><br><span class="line">        <span class="attr">removeEmpty</span>: <span class="literal">true</span>, </span><br><span class="line">        <span class="comment">// 控制删除空规则和嵌套块，默认为 true</span></span><br><span class="line">        <span class="attr">reduceNonAdjacentRules</span>: <span class="literal">true</span>, </span><br><span class="line">        <span class="comment">// 控制非相邻规则的缩减，默认为 true</span></span><br><span class="line">        <span class="attr">removeDuplicateFontRules</span>: <span class="literal">true</span>,</span><br><span class="line">         <span class="comment">// 控制删除重复的 @font-face 规则，默认为 true</span></span><br><span class="line">        <span class="attr">removeDuplicateMediaBlocks</span>: <span class="literal">true</span>, </span><br><span class="line">        <span class="comment">// 控制删除重复的 @media 规则，默认为 true</span></span><br><span class="line">        <span class="attr">removeDuplicateRules</span>: <span class="literal">true</span>, </span><br><span class="line">        <span class="comment">// 控制删除重复的规则，默认为 true</span></span><br><span class="line">        <span class="attr">removeUnusedAtRules</span>: <span class="literal">false</span>, </span><br><span class="line">        <span class="comment">// 控制删除未使用的 at 规则，默认为 false（自版本 4.1.0 起可用）</span></span><br><span class="line">        <span class="attr">restructureRules</span>: <span class="literal">false</span>, </span><br><span class="line">        <span class="comment">// 控制规则重构，默认为 false</span></span><br><span class="line">        <span class="attr">skipProperties</span>: [] </span><br><span class="line">        <span class="comment">// 控制不进行优化的属性，默认为 []，即所有属性都进行优化（自版本 4.1.0 起可用）</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }))</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">'./public'</span>));<span class="comment">// 看情况修改</span></span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 JavaScript</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">'compress'</span>, <span class="title function_">async</span>() =&gt;{</span><br><span class="line">  <span class="keyword">return</span> gulp.<span class="title function_">src</span>([<span class="string">'./public/**/*.js'</span>, <span class="string">'!./public/**/*.min.js'</span>])<span class="comment">// 看情况修改</span></span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">terser</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">'./public'</span>));<span class="comment">// 看情况修改</span></span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取文章使用字体，然后压缩</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">'mini-font'</span>, <span class="function">(<span class="params">cb</span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">var</span> buffers = [];</span><br><span class="line">  gulp</span><br><span class="line">    .<span class="title function_">src</span>([<span class="string">'./public/**/*.html'</span>]) <span class="comment">// 看情况修改</span></span><br><span class="line">    .<span class="title function_">on</span>(<span class="string">'data'</span>, <span class="keyword">function</span>(<span class="params">file</span>) {</span><br><span class="line">      buffers.<span class="title function_">push</span>(file.<span class="property">contents</span>);</span><br><span class="line">    })</span><br><span class="line">    .<span class="title function_">on</span>(<span class="string">'end'</span>, <span class="keyword">function</span>(<span class="params"></span>) {</span><br><span class="line">      <span class="keyword">var</span> text = <span class="title class_">Buffer</span>.<span class="title function_">concat</span>(buffers).<span class="title function_">toString</span>(<span class="string">'utf-8'</span>);</span><br><span class="line">      <span class="title function_">minifyFont</span>(text, cb);</span><br><span class="line">    });</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">//压缩字体</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">minifyFont</span>(<span class="params">text, cb</span>) {</span><br><span class="line">  gulp</span><br><span class="line">    .<span class="title function_">src</span>(<span class="string">'./public/font/*.ttf'</span>) <span class="comment">//原字体所在目录</span></span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">fontmin</span>({</span><br><span class="line">      <span class="attr">text</span>: text</span><br><span class="line">    }))</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">'./public/fonts/'</span>)) <span class="comment">//压缩后的输出目录</span></span><br><span class="line">    .<span class="title function_">on</span>(<span class="string">'end'</span>, cb);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义转换 TTF 到 WOFF2 的任务</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">'convertFonts'</span>, <span class="keyword">function</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">'./public/fonts/*.ttf'</span>)<span class="comment">// 看情况修改</span></span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">ttf2woff2</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">'./public/fonts/'</span>));<span class="comment">// 看情况修改</span></span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除字体原文件，主题生成的图片文件</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">'clean-files'</span>, <span class="keyword">function</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">return</span> gulp.<span class="title function_">src</span>([<span class="string">'./public/font'</span>,<span class="string">'./public/images'</span>], { <span class="attr">read</span>: <span class="literal">false</span>, <span class="attr">allowEmpty</span>: <span class="literal">true</span> })<span class="comment">// 看情况修改</span></span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">clean</span>());</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行gulp命令时依次执行以下任务</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">'default'</span>, gulp.<span class="title function_">series</span>(</span><br><span class="line">  gulp.<span class="title function_">parallel</span>(<span class="string">'compress'</span>, <span class="string">'minify-css'</span>, <span class="string">'minify-html'</span>, <span class="string">'mini-font'</span>,), </span><br><span class="line">  <span class="string">'convertFonts'</span>,<span class="comment">// 在 'mini-font' 完成后执行 'convertFonts'，最后执行clean-files</span></span><br><span class="line">  <span class="string">'clean-files'</span> </span><br><span class="line">))</span><br></pre></td></tr></tbody></table></figure>
<h2 id="运行和小小的改进">运行和小小的改进</h2>
<p>重新渲染一次，并执行 gulp，接下来就可以看到 gulp 压缩后的效果了。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">hexo g</span><br><span class="line">gulp</span><br><span class="line">hexo s</span><br></pre></td></tr></tbody></table></figure>
<p>上图为 gulp 执行前后的文件大小对比图，其中 public 为未执行 gulp 指令，public-gulp 为执行 gulp 指令。下图两者均去除字体文件和 images 文件夹后只对比 html,css,js 的大小。<br>
<img data-src="https://cdn.yuuu.org/post-img/9/1.webp" alt="" loading="lazy"><br>
<img data-src="https://cdn.yuuu.org/post-img/9/2.webp" alt="" loading="lazy"></p>
<p>可以看出，在去除字体文件和 images 文件夹后，其他的文件压缩了大约 100kb 的大小 o_o …。但是在网站中占大头的字体文件却是狠狠的压缩了，总算是不用担心网站打开速度被字体拖慢了。尽管从上图看，字体的压缩看似是从 15MB 降低至了 8MB，但其实在 <code>tff2woff2</code> 所转化的字体文件夹中，会同时将 tff 转化为 .eot , .woff2 , .woff , .ttf , .svg 多个字体格式，从而做到各个网站的适配。而目前主流浏览器大多使用 woff2 格式，也就是说，我们打开网页的时候，大概率是使用 woff2 字体，如果不去适配 IE 和低版本浏览器，大概也可以再将字体文件删除。下边的代码块是只保留 woff2 字体删除其他字体的。<s>虽然没什么用，毕竟浏览器是按照样式表来下载字体的，多余的字体文件不会被下载，留在这里也没什么影响。</s>。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">'clean-files'</span>, <span class="keyword">function</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">return</span> gulp.<span class="title function_">src</span>([</span><br><span class="line">    <span class="string">'./public/font'</span>,</span><br><span class="line">    <span class="string">'./public/images'</span>,</span><br><span class="line">    <span class="string">'./public/fonts/yourfont.eot'</span>,</span><br><span class="line">    <span class="string">'./public/fonts/yourfont.ttf'</span>,</span><br><span class="line">    <span class="string">'./public/fonts/yourfont.svg'</span>,</span><br><span class="line">    <span class="string">'./public/fonts/yourfont.woff'</span>,<span class="comment">// 看情况修改字体名字</span></span><br><span class="line">    ], { <span class="attr">read</span>: <span class="literal">false</span>, <span class="attr">allowEmpty</span>: <span class="literal">true</span> })</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">clean</span>());</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>
<p>附上一张不使用任何处理，只是用 ttf2woff2 处理字体后，输出文件夹字体占用大小截图，可以看到，svg 居然占到了丧心病狂的 4M，而 woff2 只有 699kb，<s>删了会清爽很多</s>。</p>
<p><img data-src="https://cdn.yuuu.org/post-img/9/3.webp" alt="" loading="lazy"></p>
<h2 id="注意事项">注意事项</h2>
<p><code>ttf2woff2</code> 会在指定目录生成一个文件夹，其中会有’字体文件名字.css’的 css 文件，将它引入即可使用转化后的字体文件。</p>
<p>使用 gulp 压缩字体必须在本地进行，进一步导致本地文件增大，看着有点难受。我有在想，是否可以做到当博客仓库提交的时候自动触发 action，拉取字体文件进行处理，然后博客再通过网络引入该 css，从而做到 public 文件夹的干净。但是最后实在是不想折腾，也就放弃了。</p>
<p>我所使用的图片均由外链引入，不需要 hexo 的 images 文件夹，所以使用 clean-files 时顺便将其删除。如需使用 images，请自行修改。当然，gulp 也有与压缩图片有关的插件，可自行搜索使用。</p>
<p>更详细的设置请参考所用插件的官方文档。</p>
<h2 id="参考文章">参考文章</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25pbW9jL2d1bHAtYm9vaw==">gulp-book<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly9ha2lsYXIudG9wL3Bvc3RzLzQ5YjczYjg3Lw==">使用 gulp 压缩博客静态资源<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>折腾</category>
      </categories>
      <tags>
        <tag>折腾</tag>
      </tags>
  </entry>
</search>
